// ------------------------------------------------------------------------------
//
// Copyright (c) Microsoft Corporation.
// All rights reserved.
//
// This code is licensed under the MIT License.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files(the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions :
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//
//------------------------------------------------------------------------------

// THIS FILE IS AUTOMATICALLY GENERATED FROM ClaimsTypeMapping.tt USING T4
// DON'T UPDATE MANUALLY

using System.Collections.Generic;
using System.Security.Claims;
using System.Linq;

namespace System.IdentityModel.Aad
{
    /// <summary>
    /// Defines extension methods to access claims by purpose, and not by name, making it compatible
    /// with several versions of tokens.
    /// </summary>
    public static partial class ClaimPrincipalExtensions
    {
        /// <summary> 
        /// Verifies that the token has any of the claims required. 
        /// </summary> 
        /// <param name="user">claims identity</param> 
        /// <param name="requiredClaims">Type (name) of the required claims</param> 
        /// <returns></returns> 
        public static bool ContainsAnyClaim(this ClaimsPrincipal user, params string[] requiredClaims)
        {
            if (user == null)
            {
                throw new ArgumentNullException(nameof(user));
            }
            return user.Claims.Any(claim => requiredClaims.Contains(claim.Type));
        }

        /// <summary> 
        /// Get the value of a claim including several overrides of the claims (due to ASP.NET 
        /// and ASP.NET Core using Claims mapping) 
        /// </summary> 
        /// <param name="claimsPrincipal">Claims principal</param> 
        /// <param name="claimNames">Names of the claims to consider</param> 
        /// <returns>The first value of requested claims</returns> 
        /// <exception cref="ArgumentNullException"></exception> 
        private static string GetClaimValue(this ClaimsPrincipal claimsPrincipal, params string[] claimNames)
        {
            for (var i = 0; i < claimNames.Length; i++)
            {
                var currentValue = claimsPrincipal.FindFirstValue(claimNames[i]);
                if (!string.IsNullOrEmpty(currentValue))
                {
                    return currentValue;
                }
            }

            return null;
        }

        /// <summary> 
        /// Get the value of a claim including several overrides of the claims (due to ASP.NET 
        /// and ASP.NET Core using Claims mapping) 
        /// </summary> 
        /// <param name="claimsIdentity">Claims identity</param> 
        /// <param name="claimNames">Names of the claims to consider</param> 
        /// <returns>The first value of requested claims</returns> 
        /// <exception cref="ArgumentNullException"></exception> 
        private static string GetClaimValue(this ClaimsIdentity claimsIdentity, params string[] claimNames)
        {
            for (var i = 0; i < claimNames.Length; i++)
            {
                var currentValue = claimsIdentity.FindFirstValue(claimNames[i]);
                if (!string.IsNullOrEmpty(currentValue))
                {
                    return currentValue;
                }
            }

            return null;
        }

        /// <summary> 
        /// Get all the values of the claims including several overrides of the claims (due to ASP.NET  
        /// and ASP.NET Core using Claims mapping) 
        /// </summary> 
        /// <param name="claimsPrincipal">Claims principal</param> 
        /// <param name="claimNames">Names of the claims to consider</param> 
        /// <returns>All the values of requested claims</returns> 
        /// <exception cref="ArgumentNullException"></exception> 
        private static IEnumerable<string> GetAllClaimValues(this ClaimsPrincipal claimsPrincipal, params string[] claimNames)
        {
            for (var i = 0; i < claimNames.Length; i++)
            {
                var currentValues = claimsPrincipal.FindAll(claimNames[i]);
                foreach (Claim claim in currentValues)
                {
                    yield return claim.Value;
                }
            }
        }

        /// <summary> 
        /// Get all the values of the claims including several overrides of the claims (due to ASP.NET  
        /// and ASP.NET Core using Claims mapping) 
        /// </summary> 
        /// <param name="claimsIdentity">Claims principal</param> 
        /// <param name="claimNames">Names of the claims to consider</param> 
        /// <returns>All the values of requested claims</returns> 
        /// <exception cref="ArgumentNullException"></exception> 
        private static IEnumerable<string> GetAllClaimValues(this ClaimsIdentity claimsIdentity, params string[] claimNames)
        {
            for (var i = 0; i < claimNames.Length; i++)
            {
                var currentValues = claimsIdentity.FindAll(claimNames[i]);
                foreach (Claim claim in currentValues)
                {
                    yield return claim.Value;
                }
            }
        }

        /// <summary> 
        /// Find the value of the first claim of a given type 
        /// </summary> 
        /// <param name="claimsPrincipal">Claims principal</param> 
        /// <param name="type">Claim's type (claims name)</param> 
        /// <returns>The value (can be null if the claim is not present)</returns> 
        private static string FindFirstValue(this ClaimsPrincipal claimsPrincipal, string type)
        {
            return claimsPrincipal.FindFirst(type)?.Value;
        }

        /// <summary> 
        /// Find the value of the first claim of a given type 
        /// </summary> 
        /// <param name="claimsIdentity">Claims identity</param> 
        /// <param name="type">Claim's type (claims name)</param> 
        /// <returns>The value (can be null if the claim is not present)</returns> 
        private static string FindFirstValue(this ClaimsIdentity claimsIdentity, string type)
        {
            return claimsIdentity.FindFirst(type)?.Value;
        }
    }
}
