<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".gen.cs" #>
<#@ include file="ClaimsKnowledge.tti" #>
//------------------------------------------------------------------------------
//
// Copyright (c) Microsoft Corporation.
// All rights reserved.
//
// This code is licensed under the MIT License.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files(the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions :
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//
//------------------------------------------------------------------------------

// THIS FILE IS AUTOMATICALLY GENERATED FROM ClaimsTypeAccessor.tt USING T4
// DON'T UPDATE MANUALLY

using System.Collections.Generic;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;

namespace System.IdentityModel.Aad
{
    /// <summary>
    /// Defines extension methods to access claims by purpose, and not by name, making it compatible
    /// with several versions of tokens.
    /// </summary>
    public static partial class ClaimPrincipalExtensions
    {
<#
  foreach(ClaimsKnowledge c in claimsKnowledge) 
  {
   if (c.HasMultipleInstances)
   {
#>
            /// <summary>
            /// Returns all the claims corresponding to <#=c.AccessorName#> on a ClaimsPrincipal:
            /// <list type="bullet">
<#
     foreach(string s in c.AllClaimNames)
     {
#>
            /// <item><description><#= s #></description></item>
<#
     }
#>
            /// </list>
            /// This method returns information that is <#= c.IsUsableInAuthorizationPolicies ? string.Empty : "NOT " #>safe to use for authorization.
<#
     if (!string.IsNullOrEmpty(c.PrivacyCategory))
     {
#>
            /// The privacy classification of the information returned is <#= c.PrivacyCategory #>.
<#
     }
#>
            /// </summary>
            /// <param name="claimsPrincipal">Claims principal from which to get the <#=c.AccessorName#>.</param>
            public static IEnumerable<string> Get<#=c.AccessorName#>(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetAllClaimValues(
                     <#=string.Join(",\n                     ", c.AllClaimNames)#>);
            }

            /// <summary>
            /// Returns all the claims corresponding to <#=c.AccessorName#> on a ClaimsPrincipal:
            /// <list type="bullet">
<#
     foreach(string s in c.AllClaimNames)
     {
#>
            /// <item><description><#= s #></description></item>
<#
     }
#>
            /// </list>
            /// This method returns information that is <#= c.IsUsableInAuthorizationPolicies ? string.Empty : "NOT " #>safe to use for authorization.
<#
     if (!string.IsNullOrEmpty(c.PrivacyCategory))
     {
#>
            /// The privacy classification of the information returned is <#= c.PrivacyCategory #>.
<#
     }
#>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the <#=c.AccessorName#>.</param>
            public static IEnumerable<string> Get<#=c.AccessorName#>(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetAllClaimValues(
                     <#=string.Join(",\n                     ", c.AllClaimNames)#>);
            }

<#
     }
     else
     {
#>
            /// <summary>
            /// Returns the first claim corresponding to <#=c.AccessorName#> claim on a ClaimsPrincipal
            /// <list type="bullet">
<#
     foreach(string s in c.AllClaimNames)
     {
#>
            /// <item><description><#= s #></description></item>
<#
     }
#>
            /// </list>
            /// This method returns information that is <#= c.IsUsableInAuthorizationPolicies ? string.Empty : "NOT " #>safe to use for authorization.
<#
     if (!string.IsNullOrEmpty(c.PrivacyCategory))
     {
#>
            /// The privacy classification of the information returned is <#= c.PrivacyCategory #>.
<#
     }
#>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the <#=c.AccessorName#>.</param>
            public static string Get<#=c.AccessorName#>(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     <#=string.Join(",\n                     ", c.AllClaimNames)#>);
            }

            /// <summary>
            /// Returns the first claim corresponding to <#=c.AccessorName#> claim on a ClaimsIdentity
            /// <list type="bullet">
<#
     foreach(string s in c.AllClaimNames)
     {
#>
            /// <item><description><#= s #></description></item>
<#
     }
#>
            /// </list>
            /// This method returns information that is <#= c.IsUsableInAuthorizationPolicies ? string.Empty : "NOT " #>safe to use for authorization.
<#
     if (!string.IsNullOrEmpty(c.PrivacyCategory))
     {
#>
            /// The privacy classification of the information returned is <#= c.PrivacyCategory #>.
<#
     }
#>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the <#=c.AccessorName#>.</param>
            public static string Get<#=c.AccessorName#>(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     <#=string.Join(",\n                     ", c.AllClaimNames)#>);
            }
<#
     }
 }
#>


            private static Dictionary<string, string[]> equivalentClaims = new Dictionary<string, string[]>
            {
<#
  foreach(ClaimsKnowledge c in claimsKnowledge) 
  {
        foreach(string claim in c.AllClaimNames)
        {
#>
                { <#=claim#>, new string[]{ <#= string.Join(", ", c.AllClaimNames) #> } },
<#
        }
  }
#>
            };
        }
}
