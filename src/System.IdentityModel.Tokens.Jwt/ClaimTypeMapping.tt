<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="ClaimsKnowledge.tti" #>
//------------------------------------------------------------------------------
//
// Copyright (c) Microsoft Corporation.
// All rights reserved.
//
// This code is licensed under the MIT License.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files(the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions :
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//
//------------------------------------------------------------------------------

// THIS FILE IS AUTOMATICALLY GENERATED FROM ClaimsTypeMapping.tt USING T4
// DON'T UPDATE MANUALLY

using System.Collections.Generic;
using System.Security.Claims;

namespace System.IdentityModel.Tokens.Jwt
{
    /// <summary>
    /// Defines the inbound and outbound mapping for claim claim types from jwt to .net claim 
    /// </summary>
    internal static class ClaimTypeMapping
    {
        // This is the short to long mapping.
        // key      is the long  claim type
        // value    is the short claim type
        private static Dictionary<string, string> shortToLongClaimTypeMapping = new Dictionary<string, string>
        {
<# 
  foreach(ClaimsKnowledge c in claimsKnowledge.Where(c => c.GenerateMapping)) 
  {
   foreach(string shortClaimType in c.ShortClaimNames)
   {
#>
                { <#=shortClaimType#>, <#=c.LongClaimName#> },
<#
   }
 }
#>
        };

        private static IDictionary<string, string> longToShortClaimTypeMapping = new Dictionary<string, string>();
        private static HashSet<string> inboundClaimFilter = inboundClaimFilter = new HashSet<string>();

        /// <summary>
        /// Initializes static members of the <see cref="ClaimTypeMapping"/> class. 
        /// </summary>
        static ClaimTypeMapping()
        {
            foreach (KeyValuePair<string, string> kv in shortToLongClaimTypeMapping)
            {
                if (longToShortClaimTypeMapping.ContainsKey(kv.Value))
                {
                    continue;
                }

                longToShortClaimTypeMapping.Add(kv.Value, kv.Key);
            }
        }

        /// <summary>
        /// Gets the InboundClaimTypeMap used by JwtSecurityTokenHandler when producing claims from jwt. 
        /// </summary>
        public static IDictionary<string, string> InboundClaimTypeMap
        {
            get
            {
                return shortToLongClaimTypeMapping;
            }
        }

        /// <summary>
        /// Gets the OutboundClaimTypeMap is used by JwtSecurityTokenHandler to shorten claim types when creating a jwt. 
        /// </summary>
        public static IDictionary<string, string> OutboundClaimTypeMap
        {
            get
            {
                return longToShortClaimTypeMapping;
            }
        }

        public static ISet<string> InboundClaimFilter
        {
            get
            {
                return inboundClaimFilter;
            }
        }
    }
}
