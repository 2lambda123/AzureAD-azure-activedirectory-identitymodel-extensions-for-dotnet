//------------------------------------------------------------------------------
//
// Copyright (c) Microsoft Corporation.
// All rights reserved.
//
// This code is licensed under the MIT License.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files(the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions :
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//
//------------------------------------------------------------------------------

// THIS FILE IS AUTOMATICALLY GENERATED FROM ClaimsTypeAccessor.tt USING T4
// DON'T UPDATE MANUALLY

using System.Collections.Generic;
using System.Security.Claims;

namespace System.IdentityModel.Tokens.Jwt
{
    /// <summary>
    /// Defines extension methods to access claims by purpose, and not by name, making it compatible
    /// with several versions of tokens.
    /// </summary>
    public static partial class ClaimPrincipalExtensions
    {
            /// <summary>
            /// Returns the first claim corresponding to Actor claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>JwtRegisteredClaimNames.Actort</description></item>
            /// <item><description>ClaimTypes.Actor</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the Actor.</param>
            public static string GetActor(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     JwtRegisteredClaimNames.Actort,
                     ClaimTypes.Actor);
            }

            /// <summary>
            /// Returns the first claim corresponding to Actor claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>JwtRegisteredClaimNames.Actort</description></item>
            /// <item><description>ClaimTypes.Actor</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the Actor.</param>
            public static string GetActor(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     JwtRegisteredClaimNames.Actort,
                     ClaimTypes.Actor);
            }
            /// <summary>
            /// Returns the first claim corresponding to IsGuest claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"acct"</description></item>
            /// </list>
            /// This method returns information that is safe to use for authorization.
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the IsGuest.</param>
            public static string GetIsGuest(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "acct");
            }

            /// <summary>
            /// Returns the first claim corresponding to IsGuest claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"acct"</description></item>
            /// </list>
            /// This method returns information that is safe to use for authorization.
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the IsGuest.</param>
            public static string GetIsGuest(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "acct");
            }
            /// <summary>
            /// Returns the first claim corresponding to LastAuthenticatedTime claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"auth_time"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the LastAuthenticatedTime.</param>
            public static string GetLastAuthenticatedTime(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "auth_time");
            }

            /// <summary>
            /// Returns the first claim corresponding to LastAuthenticatedTime claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"auth_time"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the LastAuthenticatedTime.</param>
            public static string GetLastAuthenticatedTime(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "auth_time");
            }
            /// <summary>
            /// Returns the first claim corresponding to Birthdate claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>JwtRegisteredClaimNames.Birthdate</description></item>
            /// <item><description>ClaimTypes.DateOfBirth</description></item>
            /// </list>
            /// The privacy classification of the information returned is EUII.
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the Birthdate.</param>
            public static string GetBirthdate(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     JwtRegisteredClaimNames.Birthdate,
                     ClaimTypes.DateOfBirth);
            }

            /// <summary>
            /// Returns the first claim corresponding to Birthdate claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>JwtRegisteredClaimNames.Birthdate</description></item>
            /// <item><description>ClaimTypes.DateOfBirth</description></item>
            /// </list>
            /// The privacy classification of the information returned is EUII.
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the Birthdate.</param>
            public static string GetBirthdate(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     JwtRegisteredClaimNames.Birthdate,
                     ClaimTypes.DateOfBirth);
            }
            /// <summary>
            /// Returns the first claim corresponding to Country claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"ctry"</description></item>
            /// </list>
            /// The privacy classification of the information returned is EUII.
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the Country.</param>
            public static string GetCountry(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "ctry");
            }

            /// <summary>
            /// Returns the first claim corresponding to Country claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"ctry"</description></item>
            /// </list>
            /// The privacy classification of the information returned is EUII.
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the Country.</param>
            public static string GetCountry(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "ctry");
            }
            /// <summary>
            /// Returns the first claim corresponding to Email claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>JwtRegisteredClaimNames.Email</description></item>
            /// <item><description>ClaimTypes.Email</description></item>
            /// </list>
            /// The privacy classification of the information returned is EUII.
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the Email.</param>
            public static string GetEmail(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     JwtRegisteredClaimNames.Email,
                     ClaimTypes.Email);
            }

            /// <summary>
            /// Returns the first claim corresponding to Email claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>JwtRegisteredClaimNames.Email</description></item>
            /// <item><description>ClaimTypes.Email</description></item>
            /// </list>
            /// The privacy classification of the information returned is EUII.
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the Email.</param>
            public static string GetEmail(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     JwtRegisteredClaimNames.Email,
                     ClaimTypes.Email);
            }
            /// <summary>
            /// Returns the first claim corresponding to FamilyName claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>JwtRegisteredClaimNames.FamilyName</description></item>
            /// <item><description>ClaimTypes.Surname</description></item>
            /// </list>
            /// The privacy classification of the information returned is EUII.
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the FamilyName.</param>
            public static string GetFamilyName(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     JwtRegisteredClaimNames.FamilyName,
                     ClaimTypes.Surname);
            }

            /// <summary>
            /// Returns the first claim corresponding to FamilyName claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>JwtRegisteredClaimNames.FamilyName</description></item>
            /// <item><description>ClaimTypes.Surname</description></item>
            /// </list>
            /// The privacy classification of the information returned is EUII.
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the FamilyName.</param>
            public static string GetFamilyName(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     JwtRegisteredClaimNames.FamilyName,
                     ClaimTypes.Surname);
            }
            /// <summary>
            /// Returns the first claim corresponding to Gender claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>JwtRegisteredClaimNames.Gender</description></item>
            /// <item><description>ClaimTypes.Gender</description></item>
            /// </list>
            /// The privacy classification of the information returned is EUII.
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the Gender.</param>
            public static string GetGender(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     JwtRegisteredClaimNames.Gender,
                     ClaimTypes.Gender);
            }

            /// <summary>
            /// Returns the first claim corresponding to Gender claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>JwtRegisteredClaimNames.Gender</description></item>
            /// <item><description>ClaimTypes.Gender</description></item>
            /// </list>
            /// The privacy classification of the information returned is EUII.
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the Gender.</param>
            public static string GetGender(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     JwtRegisteredClaimNames.Gender,
                     ClaimTypes.Gender);
            }
            /// <summary>
            /// Returns the first claim corresponding to GivenName claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>JwtRegisteredClaimNames.GivenName</description></item>
            /// <item><description>ClaimTypes.GivenName</description></item>
            /// </list>
            /// The privacy classification of the information returned is EUII.
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the GivenName.</param>
            public static string GetGivenName(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     JwtRegisteredClaimNames.GivenName,
                     ClaimTypes.GivenName);
            }

            /// <summary>
            /// Returns the first claim corresponding to GivenName claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>JwtRegisteredClaimNames.GivenName</description></item>
            /// <item><description>ClaimTypes.GivenName</description></item>
            /// </list>
            /// The privacy classification of the information returned is EUII.
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the GivenName.</param>
            public static string GetGivenName(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     JwtRegisteredClaimNames.GivenName,
                     ClaimTypes.GivenName);
            }
            /// <summary>
            /// Returns the first claim corresponding to Nameid claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>JwtRegisteredClaimNames.NameId</description></item>
            /// <item><description>ClaimTypes.NameIdentifier</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the Nameid.</param>
            public static string GetNameid(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     JwtRegisteredClaimNames.NameId,
                     ClaimTypes.NameIdentifier);
            }

            /// <summary>
            /// Returns the first claim corresponding to Nameid claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>JwtRegisteredClaimNames.NameId</description></item>
            /// <item><description>ClaimTypes.NameIdentifier</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the Nameid.</param>
            public static string GetNameid(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     JwtRegisteredClaimNames.NameId,
                     ClaimTypes.NameIdentifier);
            }
            /// <summary>
            /// Returns the first claim corresponding to Sub claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>JwtRegisteredClaimNames.Sub</description></item>
            /// <item><description>ClaimTypes.NameIdentifier</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the Sub.</param>
            public static string GetSub(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     JwtRegisteredClaimNames.Sub,
                     ClaimTypes.NameIdentifier);
            }

            /// <summary>
            /// Returns the first claim corresponding to Sub claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>JwtRegisteredClaimNames.Sub</description></item>
            /// <item><description>ClaimTypes.NameIdentifier</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the Sub.</param>
            public static string GetSub(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     JwtRegisteredClaimNames.Sub,
                     ClaimTypes.NameIdentifier);
            }
            /// <summary>
            /// Returns the first claim corresponding to Website claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>JwtRegisteredClaimNames.Website</description></item>
            /// <item><description>ClaimTypes.Webpage</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the Website.</param>
            public static string GetWebsite(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     JwtRegisteredClaimNames.Website,
                     ClaimTypes.Webpage);
            }

            /// <summary>
            /// Returns the first claim corresponding to Website claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>JwtRegisteredClaimNames.Website</description></item>
            /// <item><description>ClaimTypes.Webpage</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the Website.</param>
            public static string GetWebsite(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     JwtRegisteredClaimNames.Website,
                     ClaimTypes.Webpage);
            }
            /// <summary>
            /// Returns the first claim corresponding to UniqueName claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>JwtRegisteredClaimNames.UniqueName</description></item>
            /// <item><description>ClaimTypes.Name</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the UniqueName.</param>
            public static string GetUniqueName(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     JwtRegisteredClaimNames.UniqueName,
                     ClaimTypes.Name);
            }

            /// <summary>
            /// Returns the first claim corresponding to UniqueName claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>JwtRegisteredClaimNames.UniqueName</description></item>
            /// <item><description>ClaimTypes.Name</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the UniqueName.</param>
            public static string GetUniqueName(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     JwtRegisteredClaimNames.UniqueName,
                     ClaimTypes.Name);
            }
            /// <summary>
            /// Returns the first claim corresponding to ObjectId claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"oid"</description></item>
            /// <item><description>"http://schemas.microsoft.com/identity/claims/objectidentifier"</description></item>
            /// </list>
            /// This method returns information that is safe to use for authorization.
            /// The privacy classification of the information returned is EUPI.
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the ObjectId.</param>
            public static string GetObjectId(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "oid",
                     "http://schemas.microsoft.com/identity/claims/objectidentifier");
            }

            /// <summary>
            /// Returns the first claim corresponding to ObjectId claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"oid"</description></item>
            /// <item><description>"http://schemas.microsoft.com/identity/claims/objectidentifier"</description></item>
            /// </list>
            /// This method returns information that is safe to use for authorization.
            /// The privacy classification of the information returned is EUPI.
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the ObjectId.</param>
            public static string GetObjectId(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "oid",
                     "http://schemas.microsoft.com/identity/claims/objectidentifier");
            }
            /// <summary>
            /// Returns all the claims corresponding to Scopes on a ClaimsPrincipal:
            /// <list type="bullet">
            /// <item><description>"scp"</description></item>
            /// <item><description>"http://schemas.microsoft.com/identity/claims/scope"</description></item>
            /// </list>
            /// This method returns information that is safe to use for authorization.
            /// </summary>
            /// <param name="claimsPrincipal">Claims principal from which to get the Scopes.</param>
            public static IEnumerable<string> GetScopes(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetAllClaimValues(
                     "scp",
                     "http://schemas.microsoft.com/identity/claims/scope");
            }

            /// <summary>
            /// Returns all the claims corresponding to Scopes on a ClaimsPrincipal:
            /// <list type="bullet">
            /// <item><description>"scp"</description></item>
            /// <item><description>"http://schemas.microsoft.com/identity/claims/scope"</description></item>
            /// </list>
            /// This method returns information that is safe to use for authorization.
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the Scopes.</param>
            public static IEnumerable<string> GetScopes(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetAllClaimValues(
                     "scp",
                     "http://schemas.microsoft.com/identity/claims/scope");
            }

            /// <summary>
            /// Returns the first claim corresponding to TenantId claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"tid"</description></item>
            /// <item><description>"http://schemas.microsoft.com/identity/claims/tenantid"</description></item>
            /// </list>
            /// This method returns information that is safe to use for authorization.
            /// The privacy classification of the information returned is OII.
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the TenantId.</param>
            public static string GetTenantId(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "tid",
                     "http://schemas.microsoft.com/identity/claims/tenantid");
            }

            /// <summary>
            /// Returns the first claim corresponding to TenantId claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"tid"</description></item>
            /// <item><description>"http://schemas.microsoft.com/identity/claims/tenantid"</description></item>
            /// </list>
            /// This method returns information that is safe to use for authorization.
            /// The privacy classification of the information returned is OII.
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the TenantId.</param>
            public static string GetTenantId(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "tid",
                     "http://schemas.microsoft.com/identity/claims/tenantid");
            }
            /// <summary>
            /// Returns the first claim corresponding to Acr claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"acr"</description></item>
            /// <item><description>"http://schemas.microsoft.com/claims/authnclassreference"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the Acr.</param>
            public static string GetAcr(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "acr",
                     "http://schemas.microsoft.com/claims/authnclassreference");
            }

            /// <summary>
            /// Returns the first claim corresponding to Acr claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"acr"</description></item>
            /// <item><description>"http://schemas.microsoft.com/claims/authnclassreference"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the Acr.</param>
            public static string GetAcr(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "acr",
                     "http://schemas.microsoft.com/claims/authnclassreference");
            }
            /// <summary>
            /// Returns the first claim corresponding to Adfs1Email claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"adfs1email"</description></item>
            /// <item><description>"http://schemas.xmlsoap.org/claims/EmailAddress"</description></item>
            /// </list>
            /// The privacy classification of the information returned is EUPI.
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the Adfs1Email.</param>
            public static string GetAdfs1Email(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "adfs1email",
                     "http://schemas.xmlsoap.org/claims/EmailAddress");
            }

            /// <summary>
            /// Returns the first claim corresponding to Adfs1Email claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"adfs1email"</description></item>
            /// <item><description>"http://schemas.xmlsoap.org/claims/EmailAddress"</description></item>
            /// </list>
            /// The privacy classification of the information returned is EUPI.
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the Adfs1Email.</param>
            public static string GetAdfs1Email(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "adfs1email",
                     "http://schemas.xmlsoap.org/claims/EmailAddress");
            }
            /// <summary>
            /// Returns the first claim corresponding to Adfs1Upn claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"adfs1upn"</description></item>
            /// <item><description>"http://schemas.xmlsoap.org/claims/UPN"</description></item>
            /// </list>
            /// The privacy classification of the information returned is EUPI.
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the Adfs1Upn.</param>
            public static string GetAdfs1Upn(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "adfs1upn",
                     "http://schemas.xmlsoap.org/claims/UPN");
            }

            /// <summary>
            /// Returns the first claim corresponding to Adfs1Upn claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"adfs1upn"</description></item>
            /// <item><description>"http://schemas.xmlsoap.org/claims/UPN"</description></item>
            /// </list>
            /// The privacy classification of the information returned is EUPI.
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the Adfs1Upn.</param>
            public static string GetAdfs1Upn(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "adfs1upn",
                     "http://schemas.xmlsoap.org/claims/UPN");
            }
            /// <summary>
            /// Returns the first claim corresponding to Amr claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"amr"</description></item>
            /// <item><description>"http://schemas.microsoft.com/claims/authnmethodsreferences"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the Amr.</param>
            public static string GetAmr(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "amr",
                     "http://schemas.microsoft.com/claims/authnmethodsreferences");
            }

            /// <summary>
            /// Returns the first claim corresponding to Amr claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"amr"</description></item>
            /// <item><description>"http://schemas.microsoft.com/claims/authnmethodsreferences"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the Amr.</param>
            public static string GetAmr(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "amr",
                     "http://schemas.microsoft.com/claims/authnmethodsreferences");
            }
            /// <summary>
            /// Returns the first claim corresponding to AuthMethod claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"authmethod"</description></item>
            /// <item><description>ClaimTypes.AuthenticationMethod</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the AuthMethod.</param>
            public static string GetAuthMethod(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "authmethod",
                     ClaimTypes.AuthenticationMethod);
            }

            /// <summary>
            /// Returns the first claim corresponding to AuthMethod claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"authmethod"</description></item>
            /// <item><description>ClaimTypes.AuthenticationMethod</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the AuthMethod.</param>
            public static string GetAuthMethod(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "authmethod",
                     ClaimTypes.AuthenticationMethod);
            }
            /// <summary>
            /// Returns the first claim corresponding to CertAppPolicy claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"certapppolicy"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/12/certificatecontext/extension/applicationpolicy"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the CertAppPolicy.</param>
            public static string GetCertAppPolicy(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "certapppolicy",
                     "http://schemas.microsoft.com/2012/12/certificatecontext/extension/applicationpolicy");
            }

            /// <summary>
            /// Returns the first claim corresponding to CertAppPolicy claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"certapppolicy"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/12/certificatecontext/extension/applicationpolicy"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the CertAppPolicy.</param>
            public static string GetCertAppPolicy(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "certapppolicy",
                     "http://schemas.microsoft.com/2012/12/certificatecontext/extension/applicationpolicy");
            }
            /// <summary>
            /// Returns the first claim corresponding to CertAuthorityKeyIdentifier claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"certauthoritykeyidentifier"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/12/certificatecontext/extension/authoritykeyidentifier"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the CertAuthorityKeyIdentifier.</param>
            public static string GetCertAuthorityKeyIdentifier(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "certauthoritykeyidentifier",
                     "http://schemas.microsoft.com/2012/12/certificatecontext/extension/authoritykeyidentifier");
            }

            /// <summary>
            /// Returns the first claim corresponding to CertAuthorityKeyIdentifier claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"certauthoritykeyidentifier"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/12/certificatecontext/extension/authoritykeyidentifier"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the CertAuthorityKeyIdentifier.</param>
            public static string GetCertAuthorityKeyIdentifier(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "certauthoritykeyidentifier",
                     "http://schemas.microsoft.com/2012/12/certificatecontext/extension/authoritykeyidentifier");
            }
            /// <summary>
            /// Returns the first claim corresponding to CertBasicVonstraints claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"certbasicconstraints"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/12/certificatecontext/extension/basicconstraints"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the CertBasicVonstraints.</param>
            public static string GetCertBasicVonstraints(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "certbasicconstraints",
                     "http://schemas.microsoft.com/2012/12/certificatecontext/extension/basicconstraints");
            }

            /// <summary>
            /// Returns the first claim corresponding to CertBasicVonstraints claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"certbasicconstraints"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/12/certificatecontext/extension/basicconstraints"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the CertBasicVonstraints.</param>
            public static string GetCertBasicVonstraints(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "certbasicconstraints",
                     "http://schemas.microsoft.com/2012/12/certificatecontext/extension/basicconstraints");
            }
            /// <summary>
            /// Returns the first claim corresponding to CertEku claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"certeku"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/12/certificatecontext/extension/eku"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the CertEku.</param>
            public static string GetCertEku(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "certeku",
                     "http://schemas.microsoft.com/2012/12/certificatecontext/extension/eku");
            }

            /// <summary>
            /// Returns the first claim corresponding to CertEku claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"certeku"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/12/certificatecontext/extension/eku"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the CertEku.</param>
            public static string GetCertEku(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "certeku",
                     "http://schemas.microsoft.com/2012/12/certificatecontext/extension/eku");
            }
            /// <summary>
            /// Returns the first claim corresponding to CertIssuer claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"certissuer"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/12/certificatecontext/field/issuer"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the CertIssuer.</param>
            public static string GetCertIssuer(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "certissuer",
                     "http://schemas.microsoft.com/2012/12/certificatecontext/field/issuer");
            }

            /// <summary>
            /// Returns the first claim corresponding to CertIssuer claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"certissuer"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/12/certificatecontext/field/issuer"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the CertIssuer.</param>
            public static string GetCertIssuer(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "certissuer",
                     "http://schemas.microsoft.com/2012/12/certificatecontext/field/issuer");
            }
            /// <summary>
            /// Returns the first claim corresponding to CertIssuerName claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"certissuername"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/12/certificatecontext/field/issuername"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the CertIssuerName.</param>
            public static string GetCertIssuerName(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "certissuername",
                     "http://schemas.microsoft.com/2012/12/certificatecontext/field/issuername");
            }

            /// <summary>
            /// Returns the first claim corresponding to CertIssuerName claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"certissuername"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/12/certificatecontext/field/issuername"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the CertIssuerName.</param>
            public static string GetCertIssuerName(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "certissuername",
                     "http://schemas.microsoft.com/2012/12/certificatecontext/field/issuername");
            }
            /// <summary>
            /// Returns the first claim corresponding to CertKeyUsage claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"certkeyusage"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/12/certificatecontext/extension/keyusage"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the CertKeyUsage.</param>
            public static string GetCertKeyUsage(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "certkeyusage",
                     "http://schemas.microsoft.com/2012/12/certificatecontext/extension/keyusage");
            }

            /// <summary>
            /// Returns the first claim corresponding to CertKeyUsage claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"certkeyusage"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/12/certificatecontext/extension/keyusage"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the CertKeyUsage.</param>
            public static string GetCertKeyUsage(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "certkeyusage",
                     "http://schemas.microsoft.com/2012/12/certificatecontext/extension/keyusage");
            }
            /// <summary>
            /// Returns the first claim corresponding to CertNotAfter claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"certnotafter"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/12/certificatecontext/field/notafter"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the CertNotAfter.</param>
            public static string GetCertNotAfter(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "certnotafter",
                     "http://schemas.microsoft.com/2012/12/certificatecontext/field/notafter");
            }

            /// <summary>
            /// Returns the first claim corresponding to CertNotAfter claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"certnotafter"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/12/certificatecontext/field/notafter"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the CertNotAfter.</param>
            public static string GetCertNotAfter(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "certnotafter",
                     "http://schemas.microsoft.com/2012/12/certificatecontext/field/notafter");
            }
            /// <summary>
            /// Returns the first claim corresponding to CertNotBefore claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"certnotbefore"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/12/certificatecontext/field/notbefore"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the CertNotBefore.</param>
            public static string GetCertNotBefore(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "certnotbefore",
                     "http://schemas.microsoft.com/2012/12/certificatecontext/field/notbefore");
            }

            /// <summary>
            /// Returns the first claim corresponding to CertNotBefore claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"certnotbefore"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/12/certificatecontext/field/notbefore"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the CertNotBefore.</param>
            public static string GetCertNotBefore(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "certnotbefore",
                     "http://schemas.microsoft.com/2012/12/certificatecontext/field/notbefore");
            }
            /// <summary>
            /// Returns the first claim corresponding to CertPolicy claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"certpolicy"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/12/certificatecontext/extension/certificatepolicy"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the CertPolicy.</param>
            public static string GetCertPolicy(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "certpolicy",
                     "http://schemas.microsoft.com/2012/12/certificatecontext/extension/certificatepolicy");
            }

            /// <summary>
            /// Returns the first claim corresponding to CertPolicy claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"certpolicy"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/12/certificatecontext/extension/certificatepolicy"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the CertPolicy.</param>
            public static string GetCertPolicy(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "certpolicy",
                     "http://schemas.microsoft.com/2012/12/certificatecontext/extension/certificatepolicy");
            }
            /// <summary>
            /// Returns the first claim corresponding to CertPublickey claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"certpublickey"</description></item>
            /// <item><description>ClaimTypes.Rsa</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the CertPublickey.</param>
            public static string GetCertPublickey(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "certpublickey",
                     ClaimTypes.Rsa);
            }

            /// <summary>
            /// Returns the first claim corresponding to CertPublickey claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"certpublickey"</description></item>
            /// <item><description>ClaimTypes.Rsa</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the CertPublickey.</param>
            public static string GetCertPublickey(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "certpublickey",
                     ClaimTypes.Rsa);
            }
            /// <summary>
            /// Returns the first claim corresponding to CertRawData claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"certrawdata"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/12/certificatecontext/field/rawdata"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the CertRawData.</param>
            public static string GetCertRawData(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "certrawdata",
                     "http://schemas.microsoft.com/2012/12/certificatecontext/field/rawdata");
            }

            /// <summary>
            /// Returns the first claim corresponding to CertRawData claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"certrawdata"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/12/certificatecontext/field/rawdata"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the CertRawData.</param>
            public static string GetCertRawData(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "certrawdata",
                     "http://schemas.microsoft.com/2012/12/certificatecontext/field/rawdata");
            }
            /// <summary>
            /// Returns the first claim corresponding to CertSerialNumber claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"certserialnumber"</description></item>
            /// <item><description>ClaimTypes.SerialNumber</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the CertSerialNumber.</param>
            public static string GetCertSerialNumber(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "certserialnumber",
                     ClaimTypes.SerialNumber);
            }

            /// <summary>
            /// Returns the first claim corresponding to CertSerialNumber claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"certserialnumber"</description></item>
            /// <item><description>ClaimTypes.SerialNumber</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the CertSerialNumber.</param>
            public static string GetCertSerialNumber(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "certserialnumber",
                     ClaimTypes.SerialNumber);
            }
            /// <summary>
            /// Returns the first claim corresponding to CertSignatureAlgorithm claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"certsignaturealgorithm"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/12/certificatecontext/field/signaturealgorithm"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the CertSignatureAlgorithm.</param>
            public static string GetCertSignatureAlgorithm(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "certsignaturealgorithm",
                     "http://schemas.microsoft.com/2012/12/certificatecontext/field/signaturealgorithm");
            }

            /// <summary>
            /// Returns the first claim corresponding to CertSignatureAlgorithm claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"certsignaturealgorithm"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/12/certificatecontext/field/signaturealgorithm"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the CertSignatureAlgorithm.</param>
            public static string GetCertSignatureAlgorithm(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "certsignaturealgorithm",
                     "http://schemas.microsoft.com/2012/12/certificatecontext/field/signaturealgorithm");
            }
            /// <summary>
            /// Returns the first claim corresponding to CertSubject claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"certsubject"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/12/certificatecontext/field/subject"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the CertSubject.</param>
            public static string GetCertSubject(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "certsubject",
                     "http://schemas.microsoft.com/2012/12/certificatecontext/field/subject");
            }

            /// <summary>
            /// Returns the first claim corresponding to CertSubject claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"certsubject"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/12/certificatecontext/field/subject"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the CertSubject.</param>
            public static string GetCertSubject(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "certsubject",
                     "http://schemas.microsoft.com/2012/12/certificatecontext/field/subject");
            }
            /// <summary>
            /// Returns the first claim corresponding to CertSubjectAltName claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"certsubjectaltname"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/12/certificatecontext/extension/san"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the CertSubjectAltName.</param>
            public static string GetCertSubjectAltName(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "certsubjectaltname",
                     "http://schemas.microsoft.com/2012/12/certificatecontext/extension/san");
            }

            /// <summary>
            /// Returns the first claim corresponding to CertSubjectAltName claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"certsubjectaltname"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/12/certificatecontext/extension/san"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the CertSubjectAltName.</param>
            public static string GetCertSubjectAltName(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "certsubjectaltname",
                     "http://schemas.microsoft.com/2012/12/certificatecontext/extension/san");
            }
            /// <summary>
            /// Returns the first claim corresponding to CertSubjectKeyIdentifier claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"certsubjectkeyidentifier"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/12/certificatecontext/extension/subjectkeyidentifier"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the CertSubjectKeyIdentifier.</param>
            public static string GetCertSubjectKeyIdentifier(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "certsubjectkeyidentifier",
                     "http://schemas.microsoft.com/2012/12/certificatecontext/extension/subjectkeyidentifier");
            }

            /// <summary>
            /// Returns the first claim corresponding to CertSubjectKeyIdentifier claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"certsubjectkeyidentifier"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/12/certificatecontext/extension/subjectkeyidentifier"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the CertSubjectKeyIdentifier.</param>
            public static string GetCertSubjectKeyIdentifier(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "certsubjectkeyidentifier",
                     "http://schemas.microsoft.com/2012/12/certificatecontext/extension/subjectkeyidentifier");
            }
            /// <summary>
            /// Returns the first claim corresponding to CertSubjectName claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"certsubjectname"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/12/certificatecontext/field/subjectname"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the CertSubjectName.</param>
            public static string GetCertSubjectName(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "certsubjectname",
                     "http://schemas.microsoft.com/2012/12/certificatecontext/field/subjectname");
            }

            /// <summary>
            /// Returns the first claim corresponding to CertSubjectName claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"certsubjectname"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/12/certificatecontext/field/subjectname"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the CertSubjectName.</param>
            public static string GetCertSubjectName(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "certsubjectname",
                     "http://schemas.microsoft.com/2012/12/certificatecontext/field/subjectname");
            }
            /// <summary>
            /// Returns the first claim corresponding to CertTemplateInformation claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"certtemplateinformation"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/12/certificatecontext/extension/certificatetemplateinformation"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the CertTemplateInformation.</param>
            public static string GetCertTemplateInformation(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "certtemplateinformation",
                     "http://schemas.microsoft.com/2012/12/certificatecontext/extension/certificatetemplateinformation");
            }

            /// <summary>
            /// Returns the first claim corresponding to CertTemplateInformation claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"certtemplateinformation"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/12/certificatecontext/extension/certificatetemplateinformation"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the CertTemplateInformation.</param>
            public static string GetCertTemplateInformation(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "certtemplateinformation",
                     "http://schemas.microsoft.com/2012/12/certificatecontext/extension/certificatetemplateinformation");
            }
            /// <summary>
            /// Returns the first claim corresponding to CertTemplateName claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"certtemplatename"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/12/certificatecontext/extension/certificatetemplatename"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the CertTemplateName.</param>
            public static string GetCertTemplateName(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "certtemplatename",
                     "http://schemas.microsoft.com/2012/12/certificatecontext/extension/certificatetemplatename");
            }

            /// <summary>
            /// Returns the first claim corresponding to CertTemplateName claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"certtemplatename"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/12/certificatecontext/extension/certificatetemplatename"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the CertTemplateName.</param>
            public static string GetCertTemplateName(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "certtemplatename",
                     "http://schemas.microsoft.com/2012/12/certificatecontext/extension/certificatetemplatename");
            }
            /// <summary>
            /// Returns the first claim corresponding to CertThumbprint claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"certthumbprint"</description></item>
            /// <item><description>ClaimTypes.Thumbprint</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the CertThumbprint.</param>
            public static string GetCertThumbprint(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "certthumbprint",
                     ClaimTypes.Thumbprint);
            }

            /// <summary>
            /// Returns the first claim corresponding to CertThumbprint claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"certthumbprint"</description></item>
            /// <item><description>ClaimTypes.Thumbprint</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the CertThumbprint.</param>
            public static string GetCertThumbprint(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "certthumbprint",
                     ClaimTypes.Thumbprint);
            }
            /// <summary>
            /// Returns the first claim corresponding to CertX509Version claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"certx509version"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/12/certificatecontext/field/x509version"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the CertX509Version.</param>
            public static string GetCertX509Version(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "certx509version",
                     "http://schemas.microsoft.com/2012/12/certificatecontext/field/x509version");
            }

            /// <summary>
            /// Returns the first claim corresponding to CertX509Version claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"certx509version"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/12/certificatecontext/field/x509version"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the CertX509Version.</param>
            public static string GetCertX509Version(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "certx509version",
                     "http://schemas.microsoft.com/2012/12/certificatecontext/field/x509version");
            }
            /// <summary>
            /// Returns the first claim corresponding to ClientApplication claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"clientapplication"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/01/requestcontext/claims/x-ms-client-application"</description></item>
            /// </list>
            /// This method returns information that is safe to use for authorization.
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the ClientApplication.</param>
            public static string GetClientApplication(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "clientapplication",
                     "http://schemas.microsoft.com/2012/01/requestcontext/claims/x-ms-client-application");
            }

            /// <summary>
            /// Returns the first claim corresponding to ClientApplication claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"clientapplication"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/01/requestcontext/claims/x-ms-client-application"</description></item>
            /// </list>
            /// This method returns information that is safe to use for authorization.
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the ClientApplication.</param>
            public static string GetClientApplication(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "clientapplication",
                     "http://schemas.microsoft.com/2012/01/requestcontext/claims/x-ms-client-application");
            }
            /// <summary>
            /// Returns the first claim corresponding to ClientIp claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"clientip"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/01/requestcontext/claims/x-ms-client-ip"</description></item>
            /// </list>
            /// The privacy classification of the information returned is EUPI.
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the ClientIp.</param>
            public static string GetClientIp(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "clientip",
                     "http://schemas.microsoft.com/2012/01/requestcontext/claims/x-ms-client-ip");
            }

            /// <summary>
            /// Returns the first claim corresponding to ClientIp claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"clientip"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/01/requestcontext/claims/x-ms-client-ip"</description></item>
            /// </list>
            /// The privacy classification of the information returned is EUPI.
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the ClientIp.</param>
            public static string GetClientIp(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "clientip",
                     "http://schemas.microsoft.com/2012/01/requestcontext/claims/x-ms-client-ip");
            }
            /// <summary>
            /// Returns the first claim corresponding to ClientUserAgent claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"clientuseragent"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/01/requestcontext/claims/x-ms-client-user-agent"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the ClientUserAgent.</param>
            public static string GetClientUserAgent(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "clientuseragent",
                     "http://schemas.microsoft.com/2012/01/requestcontext/claims/x-ms-client-user-agent");
            }

            /// <summary>
            /// Returns the first claim corresponding to ClientUserAgent claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"clientuseragent"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/01/requestcontext/claims/x-ms-client-user-agent"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the ClientUserAgent.</param>
            public static string GetClientUserAgent(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "clientuseragent",
                     "http://schemas.microsoft.com/2012/01/requestcontext/claims/x-ms-client-user-agent");
            }
            /// <summary>
            /// Returns the first claim corresponding to CommonName claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"commonname"</description></item>
            /// <item><description>"http://schemas.xmlsoap.org/claims/CommonName"</description></item>
            /// </list>
            /// The privacy classification of the information returned is EUPI.
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the CommonName.</param>
            public static string GetCommonName(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "commonname",
                     "http://schemas.xmlsoap.org/claims/CommonName");
            }

            /// <summary>
            /// Returns the first claim corresponding to CommonName claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"commonname"</description></item>
            /// <item><description>"http://schemas.xmlsoap.org/claims/CommonName"</description></item>
            /// </list>
            /// The privacy classification of the information returned is EUPI.
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the CommonName.</param>
            public static string GetCommonName(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "commonname",
                     "http://schemas.xmlsoap.org/claims/CommonName");
            }
            /// <summary>
            /// Returns the first claim corresponding to DenyOnlyPrimaryGroupSid claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"denyonlyprimarygroupsid"</description></item>
            /// <item><description>ClaimTypes.DenyOnlyPrimaryGroupSid</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the DenyOnlyPrimaryGroupSid.</param>
            public static string GetDenyOnlyPrimaryGroupSid(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "denyonlyprimarygroupsid",
                     ClaimTypes.DenyOnlyPrimaryGroupSid);
            }

            /// <summary>
            /// Returns the first claim corresponding to DenyOnlyPrimaryGroupSid claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"denyonlyprimarygroupsid"</description></item>
            /// <item><description>ClaimTypes.DenyOnlyPrimaryGroupSid</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the DenyOnlyPrimaryGroupSid.</param>
            public static string GetDenyOnlyPrimaryGroupSid(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "denyonlyprimarygroupsid",
                     ClaimTypes.DenyOnlyPrimaryGroupSid);
            }
            /// <summary>
            /// Returns the first claim corresponding to DenyOnlyPrimarySid claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"denyonlyprimarysid"</description></item>
            /// <item><description>ClaimTypes.DenyOnlyPrimarySid</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the DenyOnlyPrimarySid.</param>
            public static string GetDenyOnlyPrimarySid(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "denyonlyprimarysid",
                     ClaimTypes.DenyOnlyPrimarySid);
            }

            /// <summary>
            /// Returns the first claim corresponding to DenyOnlyPrimarySid claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"denyonlyprimarysid"</description></item>
            /// <item><description>ClaimTypes.DenyOnlyPrimarySid</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the DenyOnlyPrimarySid.</param>
            public static string GetDenyOnlyPrimarySid(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "denyonlyprimarysid",
                     ClaimTypes.DenyOnlyPrimarySid);
            }
            /// <summary>
            /// Returns the first claim corresponding to DenyOnlySid claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"denyonlysid"</description></item>
            /// <item><description>ClaimTypes.DenyOnlySid</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the DenyOnlySid.</param>
            public static string GetDenyOnlySid(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "denyonlysid",
                     ClaimTypes.DenyOnlySid);
            }

            /// <summary>
            /// Returns the first claim corresponding to DenyOnlySid claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"denyonlysid"</description></item>
            /// <item><description>ClaimTypes.DenyOnlySid</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the DenyOnlySid.</param>
            public static string GetDenyOnlySid(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "denyonlysid",
                     ClaimTypes.DenyOnlySid);
            }
            /// <summary>
            /// Returns the first claim corresponding to DevicedIspName claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"devicedispname"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/01/devicecontext/claims/displayname"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the DevicedIspName.</param>
            public static string GetDevicedIspName(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "devicedispname",
                     "http://schemas.microsoft.com/2012/01/devicecontext/claims/displayname");
            }

            /// <summary>
            /// Returns the first claim corresponding to DevicedIspName claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"devicedispname"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/01/devicecontext/claims/displayname"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the DevicedIspName.</param>
            public static string GetDevicedIspName(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "devicedispname",
                     "http://schemas.microsoft.com/2012/01/devicecontext/claims/displayname");
            }
            /// <summary>
            /// Returns the first claim corresponding to DeviceId claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"deviceid"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/01/devicecontext/claims/identifier"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the DeviceId.</param>
            public static string GetDeviceId(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "deviceid",
                     "http://schemas.microsoft.com/2012/01/devicecontext/claims/identifier");
            }

            /// <summary>
            /// Returns the first claim corresponding to DeviceId claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"deviceid"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/01/devicecontext/claims/identifier"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the DeviceId.</param>
            public static string GetDeviceId(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "deviceid",
                     "http://schemas.microsoft.com/2012/01/devicecontext/claims/identifier");
            }
            /// <summary>
            /// Returns the first claim corresponding to DeviceIsManaged claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"deviceismanaged"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/01/devicecontext/claims/ismanaged"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the DeviceIsManaged.</param>
            public static string GetDeviceIsManaged(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "deviceismanaged",
                     "http://schemas.microsoft.com/2012/01/devicecontext/claims/ismanaged");
            }

            /// <summary>
            /// Returns the first claim corresponding to DeviceIsManaged claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"deviceismanaged"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/01/devicecontext/claims/ismanaged"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the DeviceIsManaged.</param>
            public static string GetDeviceIsManaged(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "deviceismanaged",
                     "http://schemas.microsoft.com/2012/01/devicecontext/claims/ismanaged");
            }
            /// <summary>
            /// Returns the first claim corresponding to DeviceOsType claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"deviceostype"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/01/devicecontext/claims/ostype"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the DeviceOsType.</param>
            public static string GetDeviceOsType(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "deviceostype",
                     "http://schemas.microsoft.com/2012/01/devicecontext/claims/ostype");
            }

            /// <summary>
            /// Returns the first claim corresponding to DeviceOsType claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"deviceostype"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/01/devicecontext/claims/ostype"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the DeviceOsType.</param>
            public static string GetDeviceOsType(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "deviceostype",
                     "http://schemas.microsoft.com/2012/01/devicecontext/claims/ostype");
            }
            /// <summary>
            /// Returns the first claim corresponding to DeviceOsVer claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"deviceosver"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/01/devicecontext/claims/osversion"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the DeviceOsVer.</param>
            public static string GetDeviceOsVer(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "deviceosver",
                     "http://schemas.microsoft.com/2012/01/devicecontext/claims/osversion");
            }

            /// <summary>
            /// Returns the first claim corresponding to DeviceOsVer claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"deviceosver"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/01/devicecontext/claims/osversion"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the DeviceOsVer.</param>
            public static string GetDeviceOsVer(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "deviceosver",
                     "http://schemas.microsoft.com/2012/01/devicecontext/claims/osversion");
            }
            /// <summary>
            /// Returns the first claim corresponding to DeviceOwner claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"deviceowner"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/01/devicecontext/claims/userowner"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the DeviceOwner.</param>
            public static string GetDeviceOwner(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "deviceowner",
                     "http://schemas.microsoft.com/2012/01/devicecontext/claims/userowner");
            }

            /// <summary>
            /// Returns the first claim corresponding to DeviceOwner claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"deviceowner"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/01/devicecontext/claims/userowner"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the DeviceOwner.</param>
            public static string GetDeviceOwner(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "deviceowner",
                     "http://schemas.microsoft.com/2012/01/devicecontext/claims/userowner");
            }
            /// <summary>
            /// Returns the first claim corresponding to DeviceRegId claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"deviceregid"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/01/devicecontext/claims/registrationid"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the DeviceRegId.</param>
            public static string GetDeviceRegId(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "deviceregid",
                     "http://schemas.microsoft.com/2012/01/devicecontext/claims/registrationid");
            }

            /// <summary>
            /// Returns the first claim corresponding to DeviceRegId claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"deviceregid"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/01/devicecontext/claims/registrationid"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the DeviceRegId.</param>
            public static string GetDeviceRegId(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "deviceregid",
                     "http://schemas.microsoft.com/2012/01/devicecontext/claims/registrationid");
            }
            /// <summary>
            /// Returns the first claim corresponding to EndpointPath claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"endpointpath"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/01/requestcontext/claims/x-ms-endpoint-absolute-path"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the EndpointPath.</param>
            public static string GetEndpointPath(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "endpointpath",
                     "http://schemas.microsoft.com/2012/01/requestcontext/claims/x-ms-endpoint-absolute-path");
            }

            /// <summary>
            /// Returns the first claim corresponding to EndpointPath claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"endpointpath"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/01/requestcontext/claims/x-ms-endpoint-absolute-path"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the EndpointPath.</param>
            public static string GetEndpointPath(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "endpointpath",
                     "http://schemas.microsoft.com/2012/01/requestcontext/claims/x-ms-endpoint-absolute-path");
            }
            /// <summary>
            /// Returns the first claim corresponding to ForwardedClientIp claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"forwardedclientip"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/01/requestcontext/claims/x-ms-forwarded-client-ip"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the ForwardedClientIp.</param>
            public static string GetForwardedClientIp(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "forwardedclientip",
                     "http://schemas.microsoft.com/2012/01/requestcontext/claims/x-ms-forwarded-client-ip");
            }

            /// <summary>
            /// Returns the first claim corresponding to ForwardedClientIp claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"forwardedclientip"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/01/requestcontext/claims/x-ms-forwarded-client-ip"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the ForwardedClientIp.</param>
            public static string GetForwardedClientIp(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "forwardedclientip",
                     "http://schemas.microsoft.com/2012/01/requestcontext/claims/x-ms-forwarded-client-ip");
            }
            /// <summary>
            /// Returns all the claims corresponding to Group on a ClaimsPrincipal:
            /// <list type="bullet">
            /// <item><description>"group"</description></item>
            /// <item><description>"http://schemas.xmlsoap.org/claims/Group"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims principal from which to get the Group.</param>
            public static IEnumerable<string> GetGroup(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetAllClaimValues(
                     "group",
                     "http://schemas.xmlsoap.org/claims/Group");
            }

            /// <summary>
            /// Returns all the claims corresponding to Group on a ClaimsPrincipal:
            /// <list type="bullet">
            /// <item><description>"group"</description></item>
            /// <item><description>"http://schemas.xmlsoap.org/claims/Group"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the Group.</param>
            public static IEnumerable<string> GetGroup(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetAllClaimValues(
                     "group",
                     "http://schemas.xmlsoap.org/claims/Group");
            }

            /// <summary>
            /// Returns all the claims corresponding to GroupsId on a ClaimsPrincipal:
            /// <list type="bullet">
            /// <item><description>"groupsid"</description></item>
            /// <item><description>ClaimTypes.GroupSid</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims principal from which to get the GroupsId.</param>
            public static IEnumerable<string> GetGroupsId(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetAllClaimValues(
                     "groupsid",
                     ClaimTypes.GroupSid);
            }

            /// <summary>
            /// Returns all the claims corresponding to GroupsId on a ClaimsPrincipal:
            /// <list type="bullet">
            /// <item><description>"groupsid"</description></item>
            /// <item><description>ClaimTypes.GroupSid</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the GroupsId.</param>
            public static IEnumerable<string> GetGroupsId(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetAllClaimValues(
                     "groupsid",
                     ClaimTypes.GroupSid);
            }

            /// <summary>
            /// Returns the first claim corresponding to IdTyp claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"idtyp"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the IdTyp.</param>
            public static string GetIdTyp(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "idtyp");
            }

            /// <summary>
            /// Returns the first claim corresponding to IdTyp claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"idtyp"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the IdTyp.</param>
            public static string GetIdTyp(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "idtyp");
            }
            /// <summary>
            /// Returns the first claim corresponding to Idp claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"idp"</description></item>
            /// <item><description>"http://schemas.microsoft.com/identity/claims/identityprovider"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the Idp.</param>
            public static string GetIdp(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "idp",
                     "http://schemas.microsoft.com/identity/claims/identityprovider");
            }

            /// <summary>
            /// Returns the first claim corresponding to Idp claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"idp"</description></item>
            /// <item><description>"http://schemas.microsoft.com/identity/claims/identityprovider"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the Idp.</param>
            public static string GetIdp(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "idp",
                     "http://schemas.microsoft.com/identity/claims/identityprovider");
            }
            /// <summary>
            /// Returns the first claim corresponding to InsideCorporateNetwork claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"insidecorporatenetwork"</description></item>
            /// <item><description>"http://schemas.microsoft.com/ws/2012/01/insidecorporatenetwork"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the InsideCorporateNetwork.</param>
            public static string GetInsideCorporateNetwork(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "insidecorporatenetwork",
                     "http://schemas.microsoft.com/ws/2012/01/insidecorporatenetwork");
            }

            /// <summary>
            /// Returns the first claim corresponding to InsideCorporateNetwork claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"insidecorporatenetwork"</description></item>
            /// <item><description>"http://schemas.microsoft.com/ws/2012/01/insidecorporatenetwork"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the InsideCorporateNetwork.</param>
            public static string GetInsideCorporateNetwork(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "insidecorporatenetwork",
                     "http://schemas.microsoft.com/ws/2012/01/insidecorporatenetwork");
            }
            /// <summary>
            /// Returns the first claim corresponding to IsRegisteredUser claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"isregistereduser"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/01/devicecontext/claims/isregistereduser"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the IsRegisteredUser.</param>
            public static string GetIsRegisteredUser(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "isregistereduser",
                     "http://schemas.microsoft.com/2012/01/devicecontext/claims/isregistereduser");
            }

            /// <summary>
            /// Returns the first claim corresponding to IsRegisteredUser claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"isregistereduser"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/01/devicecontext/claims/isregistereduser"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the IsRegisteredUser.</param>
            public static string GetIsRegisteredUser(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "isregistereduser",
                     "http://schemas.microsoft.com/2012/01/devicecontext/claims/isregistereduser");
            }
            /// <summary>
            /// Returns the first claim corresponding to LoginHint claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"login_hint"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the LoginHint.</param>
            public static string GetLoginHint(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "login_hint");
            }

            /// <summary>
            /// Returns the first claim corresponding to LoginHint claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"login_hint"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the LoginHint.</param>
            public static string GetLoginHint(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "login_hint");
            }
            /// <summary>
            /// Returns the first claim corresponding to Ppid claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"ppid"</description></item>
            /// <item><description>"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/privatepersonalidentifier"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the Ppid.</param>
            public static string GetPpid(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "ppid",
                     "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/privatepersonalidentifier");
            }

            /// <summary>
            /// Returns the first claim corresponding to Ppid claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"ppid"</description></item>
            /// <item><description>"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/privatepersonalidentifier"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the Ppid.</param>
            public static string GetPpid(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "ppid",
                     "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/privatepersonalidentifier");
            }
            /// <summary>
            /// Returns the first claim corresponding to Primarygroupsid claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"primarygroupsid"</description></item>
            /// <item><description>ClaimTypes.PrimaryGroupSid</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the Primarygroupsid.</param>
            public static string GetPrimarygroupsid(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "primarygroupsid",
                     ClaimTypes.PrimaryGroupSid);
            }

            /// <summary>
            /// Returns the first claim corresponding to Primarygroupsid claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"primarygroupsid"</description></item>
            /// <item><description>ClaimTypes.PrimaryGroupSid</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the Primarygroupsid.</param>
            public static string GetPrimarygroupsid(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "primarygroupsid",
                     ClaimTypes.PrimaryGroupSid);
            }
            /// <summary>
            /// Returns the first claim corresponding to Primarysid claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"primarysid"</description></item>
            /// <item><description>ClaimTypes.PrimarySid</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the Primarysid.</param>
            public static string GetPrimarysid(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "primarysid",
                     ClaimTypes.PrimarySid);
            }

            /// <summary>
            /// Returns the first claim corresponding to Primarysid claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"primarysid"</description></item>
            /// <item><description>ClaimTypes.PrimarySid</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the Primarysid.</param>
            public static string GetPrimarysid(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "primarysid",
                     ClaimTypes.PrimarySid);
            }
            /// <summary>
            /// Returns the first claim corresponding to Proxy claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"proxy"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/01/requestcontext/claims/x-ms-proxy"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the Proxy.</param>
            public static string GetProxy(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "proxy",
                     "http://schemas.microsoft.com/2012/01/requestcontext/claims/x-ms-proxy");
            }

            /// <summary>
            /// Returns the first claim corresponding to Proxy claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"proxy"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/01/requestcontext/claims/x-ms-proxy"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the Proxy.</param>
            public static string GetProxy(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "proxy",
                     "http://schemas.microsoft.com/2012/01/requestcontext/claims/x-ms-proxy");
            }
            /// <summary>
            /// Returns the first claim corresponding to PwdChgEndpoint claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"pwdchgurl"</description></item>
            /// <item><description>"http://schemas.microsoft.com/ws/2012/01/passwordchangeurl"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the PwdChgEndpoint.</param>
            public static string GetPwdChgEndpoint(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "pwdchgurl",
                     "http://schemas.microsoft.com/ws/2012/01/passwordchangeurl");
            }

            /// <summary>
            /// Returns the first claim corresponding to PwdChgEndpoint claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"pwdchgurl"</description></item>
            /// <item><description>"http://schemas.microsoft.com/ws/2012/01/passwordchangeurl"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the PwdChgEndpoint.</param>
            public static string GetPwdChgEndpoint(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "pwdchgurl",
                     "http://schemas.microsoft.com/ws/2012/01/passwordchangeurl");
            }
            /// <summary>
            /// Returns the first claim corresponding to PwdExpDays claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"pwdexpdays"</description></item>
            /// <item><description>"http://schemas.microsoft.com/ws/2012/01/passwordexpirationdays"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the PwdExpDays.</param>
            public static string GetPwdExpDays(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "pwdexpdays",
                     "http://schemas.microsoft.com/ws/2012/01/passwordexpirationdays");
            }

            /// <summary>
            /// Returns the first claim corresponding to PwdExpDays claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"pwdexpdays"</description></item>
            /// <item><description>"http://schemas.microsoft.com/ws/2012/01/passwordexpirationdays"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the PwdExpDays.</param>
            public static string GetPwdExpDays(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "pwdexpdays",
                     "http://schemas.microsoft.com/ws/2012/01/passwordexpirationdays");
            }
            /// <summary>
            /// Returns the first claim corresponding to PwdExpTime claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"pwdexptime"</description></item>
            /// <item><description>"http://schemas.microsoft.com/ws/2012/01/passwordexpirationtime"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the PwdExpTime.</param>
            public static string GetPwdExpTime(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "pwdexptime",
                     "http://schemas.microsoft.com/ws/2012/01/passwordexpirationtime");
            }

            /// <summary>
            /// Returns the first claim corresponding to PwdExpTime claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"pwdexptime"</description></item>
            /// <item><description>"http://schemas.microsoft.com/ws/2012/01/passwordexpirationtime"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the PwdExpTime.</param>
            public static string GetPwdExpTime(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "pwdexptime",
                     "http://schemas.microsoft.com/ws/2012/01/passwordexpirationtime");
            }
            /// <summary>
            /// Returns the first claim corresponding to RelyingPartyTrustId claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"relyingpartytrustid"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/01/requestcontext/claims/relyingpartytrustid"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the RelyingPartyTrustId.</param>
            public static string GetRelyingPartyTrustId(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "relyingpartytrustid",
                     "http://schemas.microsoft.com/2012/01/requestcontext/claims/relyingpartytrustid");
            }

            /// <summary>
            /// Returns the first claim corresponding to RelyingPartyTrustId claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"relyingpartytrustid"</description></item>
            /// <item><description>"http://schemas.microsoft.com/2012/01/requestcontext/claims/relyingpartytrustid"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the RelyingPartyTrustId.</param>
            public static string GetRelyingPartyTrustId(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "relyingpartytrustid",
                     "http://schemas.microsoft.com/2012/01/requestcontext/claims/relyingpartytrustid");
            }
            /// <summary>
            /// Returns all the claims corresponding to Role on a ClaimsPrincipal:
            /// <list type="bullet">
            /// <item><description>"role"</description></item>
            /// <item><description>"roles"</description></item>
            /// <item><description>ClaimTypes.Role</description></item>
            /// </list>
            /// This method returns information that is safe to use for authorization.
            /// </summary>
            /// <param name="claimsPrincipal">Claims principal from which to get the Role.</param>
            public static IEnumerable<string> GetRole(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetAllClaimValues(
                     "role",
                     "roles",
                     ClaimTypes.Role);
            }

            /// <summary>
            /// Returns all the claims corresponding to Role on a ClaimsPrincipal:
            /// <list type="bullet">
            /// <item><description>"role"</description></item>
            /// <item><description>"roles"</description></item>
            /// <item><description>ClaimTypes.Role</description></item>
            /// </list>
            /// This method returns information that is safe to use for authorization.
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the Role.</param>
            public static IEnumerable<string> GetRole(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetAllClaimValues(
                     "role",
                     "roles",
                     ClaimTypes.Role);
            }

            /// <summary>
            /// Returns the first claim corresponding to Sid claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"sid"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the Sid.</param>
            public static string GetSid(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "sid");
            }

            /// <summary>
            /// Returns the first claim corresponding to Sid claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"sid"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the Sid.</param>
            public static string GetSid(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "sid");
            }
            /// <summary>
            /// Returns the first claim corresponding to Upn claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"upn"</description></item>
            /// <item><description>ClaimTypes.Upn</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the Upn.</param>
            public static string GetUpn(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "upn",
                     ClaimTypes.Upn);
            }

            /// <summary>
            /// Returns the first claim corresponding to Upn claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"upn"</description></item>
            /// <item><description>ClaimTypes.Upn</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the Upn.</param>
            public static string GetUpn(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "upn",
                     ClaimTypes.Upn);
            }
            /// <summary>
            /// Returns the first claim corresponding to Winaccountname claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"winaccountname"</description></item>
            /// <item><description>ClaimTypes.WindowsAccountName</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the Winaccountname.</param>
            public static string GetWinaccountname(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "winaccountname",
                     ClaimTypes.WindowsAccountName);
            }

            /// <summary>
            /// Returns the first claim corresponding to Winaccountname claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"winaccountname"</description></item>
            /// <item><description>ClaimTypes.WindowsAccountName</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the Winaccountname.</param>
            public static string GetWinaccountname(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "winaccountname",
                     ClaimTypes.WindowsAccountName);
            }
            /// <summary>
            /// Returns the first claim corresponding to VerifiedPrimaryEmail claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"verified_primary_email"</description></item>
            /// </list>
            /// The privacy classification of the information returned is EUPI.
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the VerifiedPrimaryEmail.</param>
            public static string GetVerifiedPrimaryEmail(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "verified_primary_email");
            }

            /// <summary>
            /// Returns the first claim corresponding to VerifiedPrimaryEmail claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"verified_primary_email"</description></item>
            /// </list>
            /// The privacy classification of the information returned is EUPI.
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the VerifiedPrimaryEmail.</param>
            public static string GetVerifiedPrimaryEmail(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "verified_primary_email");
            }
            /// <summary>
            /// Returns the first claim corresponding to VerifiedSecondaryEmail claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"verified_secondary_email"</description></item>
            /// </list>
            /// The privacy classification of the information returned is EUPI.
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the VerifiedSecondaryEmail.</param>
            public static string GetVerifiedSecondaryEmail(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "verified_secondary_email");
            }

            /// <summary>
            /// Returns the first claim corresponding to VerifiedSecondaryEmail claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"verified_secondary_email"</description></item>
            /// </list>
            /// The privacy classification of the information returned is EUPI.
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the VerifiedSecondaryEmail.</param>
            public static string GetVerifiedSecondaryEmail(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "verified_secondary_email");
            }
            /// <summary>
            /// Returns the first claim corresponding to VNet claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"vnet"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the VNet.</param>
            public static string GetVNet(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "vnet");
            }

            /// <summary>
            /// Returns the first claim corresponding to VNet claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"vnet"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the VNet.</param>
            public static string GetVNet(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "vnet");
            }
            /// <summary>
            /// Returns the first claim corresponding to PreferedDataLocation claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"xms_pdl"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the PreferedDataLocation.</param>
            public static string GetPreferedDataLocation(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "xms_pdl");
            }

            /// <summary>
            /// Returns the first claim corresponding to PreferedDataLocation claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"xms_pdl"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the PreferedDataLocation.</param>
            public static string GetPreferedDataLocation(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "xms_pdl");
            }
            /// <summary>
            /// Returns the first claim corresponding to UserPreferedLanguage claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"xms_tpl"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the UserPreferedLanguage.</param>
            public static string GetUserPreferedLanguage(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "xms_tpl");
            }

            /// <summary>
            /// Returns the first claim corresponding to UserPreferedLanguage claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"xms_tpl"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the UserPreferedLanguage.</param>
            public static string GetUserPreferedLanguage(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "xms_tpl");
            }
            /// <summary>
            /// Returns the first claim corresponding to ZeroTouchDeploymentId claim on a ClaimsPrincipal
            /// <list type="bullet">
            /// <item><description>"ztdid"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsPrincipal">Claims ClaimsPrincipal from which to get the ZeroTouchDeploymentId.</param>
            public static string GetZeroTouchDeploymentId(this ClaimsPrincipal claimsPrincipal)
            {
                 if (claimsPrincipal == null)
                 {
                      throw new ArgumentNullException(nameof(claimsPrincipal));
                 }
                 return claimsPrincipal.GetClaimValue(
                     "ztdid");
            }

            /// <summary>
            /// Returns the first claim corresponding to ZeroTouchDeploymentId claim on a ClaimsIdentity
            /// <list type="bullet">
            /// <item><description>"ztdid"</description></item>
            /// </list>
            /// </summary>
            /// <param name="claimsIdentity">Claims ClaimsIdentity from which to get the ZeroTouchDeploymentId.</param>
            public static string GetZeroTouchDeploymentId(this ClaimsIdentity claimsIdentity)
            {
                 if (claimsIdentity == null)
                 {
                      throw new ArgumentNullException(nameof(claimsIdentity));
                 }
                 return claimsIdentity.GetClaimValue(
                     "ztdid");
            }
        }
}
