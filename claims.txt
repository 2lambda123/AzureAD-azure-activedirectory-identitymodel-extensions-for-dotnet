diff --git a/src/Microsoft.IdentityModel.JsonWebTokens/JwtTokenUtilities.cs b/src/Microsoft.IdentityModel.JsonWebTokens/JwtTokenUtilities.cs
index 4799841d..9144bf83 100644
--- a/src/Microsoft.IdentityModel.JsonWebTokens/JwtTokenUtilities.cs
+++ b/src/Microsoft.IdentityModel.JsonWebTokens/JwtTokenUtilities.cs
@@ -29,6 +29,7 @@ using Microsoft.IdentityModel.Json.Linq;
 using Microsoft.IdentityModel.Logging;
 using Microsoft.IdentityModel.Tokens;
 using System;
+using System.Collections;
 using System.Collections.Generic;
 using System.Collections.ObjectModel;
 using System.Globalization;
@@ -104,6 +105,47 @@ namespace Microsoft.IdentityModel.JsonWebTokens
             return payload;
         }
 
+        internal  static string GetValueTypeFromValue(object value)
+        {
+            foreach (var item in (IList)value)
+            {
+                if (item.GetType().Name == typeof(String).Name)
+                {
+                    return ClaimValueTypes.String;
+                }
+            }
+
+            return null;
+
+        }
+        internal static IEnumerable<Claim> CreateClaimsFromDictionary(IDictionary<string, object> claimsCollection)
+        {
+            List<Claim> claims = new List<Claim>();
+            object value;
+            foreach (string claimtype in claimsCollection.Keys)
+            {
+               claimsCollection.TryGetValue(claimtype,out value);
+                if (value != null)
+                {
+                    if (value.GetType().Name == typeof(List<>).Name)
+                    {
+                        string valueType = GetValueTypeFromValue(value);
+                        foreach (var item in (IList)value)
+                        {
+                            claims.Add(new Claim(claimtype, item.ToString(), valueType));
+                        }
+                    }
+                    else
+                    {
+                        claims.Add(new Claim(claimtype, value.ToString(), ClaimValueTypes.String));
+                    }
+                    
+                }
+
+            }
+            return claims;
+        }
+
         /// <summary>
         /// Produces a signature over the 'input'.
         /// </summary>
diff --git a/src/System.IdentityModel.Tokens.Jwt/JwtSecurityTokenHandler.cs b/src/System.IdentityModel.Tokens.Jwt/JwtSecurityTokenHandler.cs
index be79a36c..c80e3d44 100644
--- a/src/System.IdentityModel.Tokens.Jwt/JwtSecurityTokenHandler.cs
+++ b/src/System.IdentityModel.Tokens.Jwt/JwtSecurityTokenHandler.cs
@@ -359,7 +359,7 @@ namespace System.IdentityModel.Tokens.Jwt
         /// <returns>A Base64UrlEncoded string in 'Compact Serialization Format'.</returns>
         public virtual string CreateEncodedJwt(string issuer, string audience, ClaimsIdentity subject, DateTime? notBefore, DateTime? expires, DateTime? issuedAt, SigningCredentials signingCredentials)
         {
-            return CreateJwtSecurityTokenPrivate(issuer, audience, subject, notBefore, expires, issuedAt, signingCredentials, null).RawData;
+            return CreateJwtSecurityTokenPrivate(issuer, audience, subject, notBefore, expires, issuedAt, signingCredentials, null,null).RawData;
         }
 
         /// <summary>
@@ -382,7 +382,7 @@ namespace System.IdentityModel.Tokens.Jwt
         /// <exception cref="ArgumentException">If 'expires' &lt;= 'notBefore'.</exception>
         public virtual string CreateEncodedJwt(string issuer, string audience, ClaimsIdentity subject, DateTime? notBefore, DateTime? expires, DateTime? issuedAt, SigningCredentials signingCredentials, EncryptingCredentials encryptingCredentials)
         {
-            return CreateJwtSecurityTokenPrivate(issuer, audience, subject, notBefore, expires, issuedAt, signingCredentials, encryptingCredentials).RawData;
+            return CreateJwtSecurityTokenPrivate(issuer, audience, subject, notBefore, expires, issuedAt, signingCredentials, encryptingCredentials,null).RawData;
         }
 
         /// <summary>
@@ -403,7 +403,8 @@ namespace System.IdentityModel.Tokens.Jwt
                 tokenDescriptor.Expires,
                 tokenDescriptor.IssuedAt,
                 tokenDescriptor.SigningCredentials,
-                tokenDescriptor.EncryptingCredentials);
+                tokenDescriptor.EncryptingCredentials,
+                tokenDescriptor.Claims);
         }
 
         /// <summary>
@@ -429,7 +430,7 @@ namespace System.IdentityModel.Tokens.Jwt
         /// <exception cref="ArgumentException">If 'expires' &lt;= 'notBefore'.</exception>
         public virtual JwtSecurityToken CreateJwtSecurityToken(string issuer, string audience, ClaimsIdentity subject, DateTime? notBefore, DateTime? expires, DateTime? issuedAt, SigningCredentials signingCredentials, EncryptingCredentials encryptingCredentials)
         {
-            return CreateJwtSecurityTokenPrivate(issuer, audience, subject, notBefore, expires, issuedAt, signingCredentials, encryptingCredentials);
+            return CreateJwtSecurityTokenPrivate(issuer, audience, subject, notBefore, expires, issuedAt, signingCredentials, encryptingCredentials,null);
         }
 
         /// <summary>
@@ -453,7 +454,7 @@ namespace System.IdentityModel.Tokens.Jwt
         /// <exception cref="ArgumentException">If 'expires' &lt;= 'notBefore'.</exception>
         public virtual JwtSecurityToken CreateJwtSecurityToken(string issuer = null, string audience = null, ClaimsIdentity subject = null, DateTime? notBefore = null, DateTime? expires = null, DateTime? issuedAt = null, SigningCredentials signingCredentials = null)
         {
-            return CreateJwtSecurityTokenPrivate(issuer, audience, subject, notBefore, expires, issuedAt, signingCredentials, null);
+            return CreateJwtSecurityTokenPrivate(issuer, audience, subject, notBefore, expires, issuedAt, signingCredentials, null, null);
         }
 
         /// <summary>
@@ -474,10 +475,11 @@ namespace System.IdentityModel.Tokens.Jwt
                 tokenDescriptor.Expires,
                 tokenDescriptor.IssuedAt,
                 tokenDescriptor.SigningCredentials,
-                tokenDescriptor.EncryptingCredentials);
+                tokenDescriptor.EncryptingCredentials,
+                tokenDescriptor.Claims);
         }
 
-        private JwtSecurityToken CreateJwtSecurityTokenPrivate(string issuer, string audience, ClaimsIdentity subject, DateTime? notBefore, DateTime? expires, DateTime? issuedAt, SigningCredentials signingCredentials, EncryptingCredentials encryptingCredentials)
+        private JwtSecurityToken CreateJwtSecurityTokenPrivate(string issuer, string audience, ClaimsIdentity subject, DateTime? notBefore, DateTime? expires, DateTime? issuedAt, SigningCredentials signingCredentials, EncryptingCredentials encryptingCredentials, IDictionary<string, object> claimCollection)
         {
             if (SetDefaultTimesOnTokenCreation && (!expires.HasValue || !issuedAt.HasValue || !notBefore.HasValue))
             {
@@ -491,9 +493,13 @@ namespace System.IdentityModel.Tokens.Jwt
                 if (!notBefore.HasValue)
                     notBefore = now;
             }
+            IEnumerable<Claim> claims = null;
+            if (claimCollection != null)
+                claims = JwtTokenUtilities.CreateClaimsFromDictionary(claimCollection);
 
+            JwtPayload payload = new JwtPayload(issuer, audience, (claims == null ? null : OutboundClaimTypeTransform(claims)), notBefore, expires, issuedAt);
             LogHelper.LogVerbose(LogMessages.IDX12721, (audience ?? "null"), (issuer ?? "null"));
-            JwtPayload payload = new JwtPayload(issuer, audience, (subject == null ? null : OutboundClaimTypeTransform(subject.Claims)), notBefore, expires, issuedAt);
+            //JwtPayload payload = new JwtPayload(issuer, audience, (subject == null ? null : OutboundClaimTypeTransform(subject.Claims)), notBefore, expires, issuedAt);
             JwtHeader header = signingCredentials == null ? new JwtHeader() : new JwtHeader(signingCredentials, OutboundAlgorithmMap);
 
             if (subject?.Actor != null)
diff --git a/test/Microsoft.IdentityModel.JsonWebTokens.Tests/JsonWebTokenHandlerTests.cs b/test/Microsoft.IdentityModel.JsonWebTokens.Tests/JsonWebTokenHandlerTests.cs
index 4a8bf573..4e2d20f4 100644
--- a/test/Microsoft.IdentityModel.JsonWebTokens.Tests/JsonWebTokenHandlerTests.cs
+++ b/test/Microsoft.IdentityModel.JsonWebTokens.Tests/JsonWebTokenHandlerTests.cs
@@ -65,6 +65,18 @@ namespace Microsoft.IdentityModel.JsonWebTokens.Tests
             TestUtilities.AssertFailIfErrors(context);
         }
 
+        [Fact]
+        public void TestUtilties()
+        {
+            TestUtilities.WriteHeader($"{this}.Base64UrlEncodedUnsignedJwtHeader");
+            var context = new CompareContext();
+            Dictionary<string, object>  dict = JwtTokenUtilities.CreateDictionaryFromClaims(Default.PayloadClaims);
+            IEnumerable<Claim> claims = JwtTokenUtilities.CreateClaimsFromDictionary(Default.PayloadDictionary);
+            IEnumerable<Claim> result = (Default.PayloadClaimsTemp).Concat(Default.PayloadClaims)
+        .GroupBy(x => x.Type)
+        .Select(x => x.First()); 
+
+        }
         [Theory, MemberData(nameof(SegmentTheoryData))]
         public void SegmentCanRead(JwtTheoryData theoryData)
         {
@@ -372,216 +384,11 @@ namespace Microsoft.IdentityModel.JsonWebTokens.Tests
                         TestId = "Valid",
                         Payload = Default.PayloadString,
                         TokenDescriptor =  new SecurityTokenDescriptor
-                        {
-                            SigningCredentials = KeyingMaterial.JsonWebKeyRsa256SigningCredentials,
-                            EncryptingCredentials = KeyingMaterial.DefaultSymmetricEncryptingCreds_Aes256_Sha512_512,
-                            Claims = Default.PayloadDictionary
-                        },
-                        JsonWebTokenHandler = new JsonWebTokenHandler(),
-                        ValidationParameters = new TokenValidationParameters
-                        {
-                            IssuerSigningKey = KeyingMaterial.JsonWebKeyRsa256SigningCredentials.Key,
-                            TokenDecryptionKey = KeyingMaterial.DefaultSymmetricSecurityKey_512,
-                            ValidAudience = Default.Audience,
-                            ValidIssuer = Default.Issuer
-                        }
-                    },
-                    new CreateTokenTheoryData
-                    {
-                        TestId = "ValidUsingX509SecurityKey",
-                        Payload = Default.PayloadString,
-                        TokenDescriptor =  new SecurityTokenDescriptor
-                        {
-                            SigningCredentials = KeyingMaterial.DefaultX509SigningCreds_2048_RsaSha2_Sha2,
-                            EncryptingCredentials = KeyingMaterial.DefaultSymmetricEncryptingCreds_Aes256_Sha512_512,
-                            Claims = Default.PayloadDictionary
-                        },
-                        JsonWebTokenHandler = new JsonWebTokenHandler(),
-                        ValidationParameters = new TokenValidationParameters
-                        {
-                            IssuerSigningKey = KeyingMaterial.DefaultX509SigningCreds_2048_RsaSha2_Sha2.Key,
-                            TokenDecryptionKey = KeyingMaterial.DefaultSymmetricSecurityKey_512,
-                            ValidAudience = Default.Audience,
-                            ValidIssuer = Default.Issuer
-                        }
-                    },
-                    new CreateTokenTheoryData
-                    {
-                        TestId = "TokenDescriptorNull",
-                        Payload = Default.PayloadString,
-                        TokenDescriptor =  null,
-                        JsonWebTokenHandler = new JsonWebTokenHandler(),
-                        ValidationParameters = new TokenValidationParameters
-                        {
-                            IssuerSigningKey = KeyingMaterial.JsonWebKeyRsa256SigningCredentials.Key,
-                            TokenDecryptionKey = KeyingMaterial.DefaultSymmetricSecurityKey_512,
-                            ValidAudience = Default.Audience,
-                            ValidIssuer = Default.Issuer
-                        },
-                        ExpectedException = ExpectedException.ArgumentNullException("IDX10000:")
-                    },
-                    new CreateTokenTheoryData
-                    {
-                        TestId = "TokenDescriptorClaimsNull",
-                        Payload = new JObject()
-                        {
-                            { JwtRegisteredClaimNames.Aud, Default.Audience },
-                            { JwtRegisteredClaimNames.Exp, EpochTime.GetIntDate(Default.Expires) },
-                            { JwtRegisteredClaimNames.Iat, EpochTime.GetIntDate(Default.IssueInstant) },
-                            { JwtRegisteredClaimNames.Nbf, EpochTime.GetIntDate(Default.NotBefore) },
-                        }.ToString(Formatting.None),
-                        TokenDescriptor =  new SecurityTokenDescriptor
-                        {
-                            Audience = Default.Audience,
-                            IssuedAt = Default.NotBefore,
-                            NotBefore = Default.NotBefore,
-                            Expires = Default.Expires,
-                            SigningCredentials = KeyingMaterial.JsonWebKeyRsa256SigningCredentials,
-                            EncryptingCredentials = KeyingMaterial.DefaultSymmetricEncryptingCreds_Aes256_Sha512_512,
-                            Claims = null
-                        },
-                        JsonWebTokenHandler = new JsonWebTokenHandler(),
-                        ValidationParameters = new TokenValidationParameters
-                        {
-                            IssuerSigningKey = KeyingMaterial.JsonWebKeyRsa256SigningCredentials.Key,
-                            TokenDecryptionKey = KeyingMaterial.DefaultSymmetricSecurityKey_512,
-                            ValidAudience = Default.Audience,
-                            ValidateIssuer = false
-                        }
-                    },
-                    new CreateTokenTheoryData
-                    {
-                        TestId = "TokenDescriptorClaimsEmpty",
-                        Payload = new JObject()
-                        {
-                            { JwtRegisteredClaimNames.Aud, Default.Audience },
-                            { JwtRegisteredClaimNames.Exp, EpochTime.GetIntDate(Default.Expires) },
-                            { JwtRegisteredClaimNames.Iat, EpochTime.GetIntDate(Default.IssueInstant) },
-                            { JwtRegisteredClaimNames.Nbf, EpochTime.GetIntDate(Default.NotBefore) },
-                        }.ToString(Formatting.None),
-                        TokenDescriptor =  new SecurityTokenDescriptor
-                        {
-                            Audience = Default.Audience,
-                            IssuedAt = Default.NotBefore,
-                            NotBefore = Default.NotBefore,
-                            Expires = Default.Expires,
-                            SigningCredentials = KeyingMaterial.JsonWebKeyRsa256SigningCredentials,
-                            EncryptingCredentials = KeyingMaterial.DefaultSymmetricEncryptingCreds_Aes256_Sha512_512,
-                            Claims = new Dictionary<string, object>()
-                        },
-                        JsonWebTokenHandler = new JsonWebTokenHandler(),
-                        ValidationParameters = new TokenValidationParameters
-                        {
-                            IssuerSigningKey = KeyingMaterial.JsonWebKeyRsa256SigningCredentials.Key,
-                            TokenDecryptionKey = KeyingMaterial.DefaultSymmetricSecurityKey_512,
-                            ValidAudience = Default.Audience,
-                            ValidateIssuer = false,
-                        }
-                    },
-                    new CreateTokenTheoryData
-                    {
-                        TestId = "TokenDescriptorSigningCredentialsNullRequireSignedTokensFalse",
-                        Payload = Default.PayloadString,
-                        TokenDescriptor =  new SecurityTokenDescriptor
-                        {
-                            SigningCredentials = null,
-                            EncryptingCredentials = KeyingMaterial.DefaultSymmetricEncryptingCreds_Aes256_Sha512_512,
-                            Claims = Default.PayloadDictionary
-                        },
-                        JsonWebTokenHandler = new JsonWebTokenHandler(),
-                        ValidationParameters = new TokenValidationParameters
-                        {
-                            IssuerSigningKey = KeyingMaterial.JsonWebKeyRsa256SigningCredentials.Key,
-                            TokenDecryptionKey = KeyingMaterial.DefaultSymmetricSecurityKey_512,
-                            ValidAudience = Default.Audience,
-                            ValidIssuer = Default.Issuer,
-                            RequireSignedTokens = false,
-                        },
-                    },
-                    new CreateTokenTheoryData
-                    {
-                        TestId = "TokenDescriptorSigningCredentialsNullRequireSignedTokensTrue",
-                        Payload = Default.PayloadString,
-                        TokenDescriptor =  new SecurityTokenDescriptor
-                        {
-                            SigningCredentials = null,
-                            EncryptingCredentials = KeyingMaterial.DefaultSymmetricEncryptingCreds_Aes256_Sha512_512,
-                            Claims = Default.PayloadDictionary
-                        },
-                        JsonWebTokenHandler = new JsonWebTokenHandler(),
-                        ValidationParameters = new TokenValidationParameters
-                        {
-                            IssuerSigningKey = KeyingMaterial.JsonWebKeyRsa256SigningCredentials.Key,
-                            TokenDecryptionKey = KeyingMaterial.DefaultSymmetricSecurityKey_512,
-                            ValidAudience = Default.Audience,
-                            ValidIssuer = Default.Issuer,
-                        },
-                        IsValid = false
-                    },
-                    new CreateTokenTheoryData // Test checks that values in SecurityTokenDescriptor.Payload
-                    // are properly replaced with the properties that are explicitly specified on the SecurityTokenDescriptor.
-                    {
-                        TestId = "UseSecurityTokenDescriptorProperties",
-                        Payload = new JObject()
-                        {
-                            { JwtRegisteredClaimNames.Email, "Bob@contoso.com" },
-                            { JwtRegisteredClaimNames.GivenName, "Bob" },
-                            { JwtRegisteredClaimNames.Iss, "Issuer" },
-                            { JwtRegisteredClaimNames.Aud, "Audience" },
-                            { JwtRegisteredClaimNames.Iat, EpochTime.GetIntDate(DateTime.Parse("2018-03-17T18:33:37.080Z")) },
-                            { JwtRegisteredClaimNames.Nbf, EpochTime.GetIntDate(DateTime.Parse("2018-03-17T18:33:37.080Z")) },
-                            { JwtRegisteredClaimNames.Exp, EpochTime.GetIntDate(DateTime.Parse("2023-03-17T18:33:37.080Z")) },
-                        }.ToString(Formatting.None),
-                        TokenDescriptor =  new SecurityTokenDescriptor
-                        {
-                            SigningCredentials = KeyingMaterial.JsonWebKeyRsa256SigningCredentials,
-                            EncryptingCredentials = KeyingMaterial.DefaultSymmetricEncryptingCreds_Aes256_Sha512_512,
-                            Claims = Default.PayloadDictionary,
-                            Issuer = "Issuer",
-                            Audience = "Audience",
-                            IssuedAt = DateTime.Parse("2018-03-17T18:33:37.080Z"),
-                            NotBefore = DateTime.Parse("2018-03-17T18:33:37.080Z"),
-                            Expires = DateTime.Parse("2023-03-17T18:33:37.080Z")
-                        },
-                        JsonWebTokenHandler = new JsonWebTokenHandler(),
-                        ValidationParameters = new TokenValidationParameters
-                        {
-                            IssuerSigningKey = KeyingMaterial.JsonWebKeyRsa256SigningCredentials.Key,
-                            TokenDecryptionKey = KeyingMaterial.DefaultSymmetricSecurityKey_512,
-                            ValidAudience = "Audience",
-                            ValidIssuer = "Issuer"
-                        }
-                    },
-                    new CreateTokenTheoryData
-                    {
-                        TestId = "SingleAdditionalHeaderClaim",
-                        Payload = Default.PayloadString,
-                        TokenDescriptor =  new SecurityTokenDescriptor
-                        {
-                            SigningCredentials = KeyingMaterial.JsonWebKeyRsa256SigningCredentials,
-                            EncryptingCredentials = KeyingMaterial.DefaultSymmetricEncryptingCreds_Aes256_Sha512_512,
-                            Claims = Default.PayloadDictionary,
-                            AdditionalHeaderClaims = new Dictionary<string, object> () { { "int", 123 } }
-                        },
-                        JsonWebTokenHandler = new JsonWebTokenHandler(),
-                        ValidationParameters = new TokenValidationParameters
-                        {
-                            IssuerSigningKey = KeyingMaterial.JsonWebKeyRsa256SigningCredentials.Key,
-                            TokenDecryptionKey = KeyingMaterial.DefaultSymmetricSecurityKey_512,
-                            ValidAudience = Default.Audience,
-                            ValidIssuer = Default.Issuer
-                        }
-                    },
-                    new CreateTokenTheoryData
-                    {
-                        TestId = "MultipleAdditionalHeaderClaims",
-                        Payload = Default.PayloadString,
-                        TokenDescriptor =  new SecurityTokenDescriptor
                         {
                             SigningCredentials = KeyingMaterial.JsonWebKeyRsa256SigningCredentials,
                             EncryptingCredentials = KeyingMaterial.DefaultSymmetricEncryptingCreds_Aes256_Sha512_512,
                             Claims = Default.PayloadDictionary,
-                            AdditionalHeaderClaims = new Dictionary<string, object> () { { "int", 123 }, { "string", "string" } }
+                            Subject = new ClaimsIdentity(Default.PayloadClaims)
                         },
                         JsonWebTokenHandler = new JsonWebTokenHandler(),
                         ValidationParameters = new TokenValidationParameters
@@ -592,52 +399,12 @@ namespace Microsoft.IdentityModel.JsonWebTokens.Tests
                             ValidIssuer = Default.Issuer
                         }
                     },
-                    new CreateTokenTheoryData
-                    {
-                        TestId = "DuplicateAdditionalHeaderClaim",
-                        Payload = Default.PayloadString,
-                        TokenDescriptor =  new SecurityTokenDescriptor
-                        {
-                            SigningCredentials = KeyingMaterial.JsonWebKeyRsa256SigningCredentials,
-                            EncryptingCredentials = KeyingMaterial.DefaultSymmetricEncryptingCreds_Aes256_Sha512_512,
-                            Claims = Default.PayloadDictionary,
-                            AdditionalHeaderClaims = new Dictionary<string, object> () { { JwtHeaderParameterNames.Alg, "alg" } }
-                        },
-                        JsonWebTokenHandler = new JsonWebTokenHandler(),
-                        ValidationParameters = new TokenValidationParameters
-                        {
-                            IssuerSigningKey = KeyingMaterial.JsonWebKeyRsa256SigningCredentials.Key,
-                            TokenDecryptionKey = KeyingMaterial.DefaultSymmetricSecurityKey_512,
-                            ValidAudience = Default.Audience,
-                            ValidIssuer = Default.Issuer
-                        },
-                        ExpectedException = ExpectedException.SecurityTokenException("IDX14116:")
-                    },
-                    new CreateTokenTheoryData
-                    {
-                        TestId = "DuplicateAdditionalHeaderClaimDifferentCase",
-                        Payload = Default.PayloadString,
-                        TokenDescriptor =  new SecurityTokenDescriptor
-                        {
-                            SigningCredentials = KeyingMaterial.JsonWebKeyRsa256SigningCredentials,
-                            EncryptingCredentials = KeyingMaterial.DefaultSymmetricEncryptingCreds_Aes256_Sha512_512,
-                            Claims = Default.PayloadDictionary,
-                            AdditionalHeaderClaims = new Dictionary<string, object> () { { JwtHeaderParameterNames.Alg.ToUpper(), "alg" } }
-                        },
-                        JsonWebTokenHandler = new JsonWebTokenHandler(),
-                        ValidationParameters = new TokenValidationParameters
-                        {
-                            IssuerSigningKey = KeyingMaterial.JsonWebKeyRsa256SigningCredentials.Key,
-                            TokenDecryptionKey = KeyingMaterial.DefaultSymmetricSecurityKey_512,
-                            ValidAudience = Default.Audience,
-                            ValidIssuer = Default.Issuer
-                        },
-                        ExpectedException = ExpectedException.SecurityTokenException("IDX14116:")
-                    }
                 };
             }
         }
 
+
+
         // Tests checks to make sure that the token string created by the JsonWebTokenHandler is consistent with the 
         // token string created by the JwtSecurityTokenHandler.
         [Theory, MemberData(nameof(CreateJWSTheoryData))]
diff --git a/test/Microsoft.IdentityModel.TestUtils/Default.cs b/test/Microsoft.IdentityModel.TestUtils/Default.cs
index ccbb46d2..a8ba9f8f 100644
--- a/test/Microsoft.IdentityModel.TestUtils/Default.cs
+++ b/test/Microsoft.IdentityModel.TestUtils/Default.cs
@@ -400,6 +400,21 @@ namespace Microsoft.IdentityModel.TestUtils
                 new Claim(JwtRegisteredClaimNames.Email, "Bob@contoso.com", ClaimValueTypes.String, Issuer, Issuer),
                 new Claim(JwtRegisteredClaimNames.GivenName, "Bob", ClaimValueTypes.String, Issuer, Issuer),
                 new Claim(JwtRegisteredClaimNames.Iss, Default.Issuer, ClaimValueTypes.String, Issuer, Issuer),
+                new Claim(JwtRegisteredClaimNames.Iss, "me", ClaimValueTypes.String, Issuer, Issuer),
+                new Claim(JwtRegisteredClaimNames.Aud, Default.Audience, ClaimValueTypes.String, Issuer, Issuer),
+                new Claim(JwtRegisteredClaimNames.Iat, EpochTime.GetIntDate(Default.IssueInstant).ToString(), ClaimValueTypes.String, Issuer, Issuer),
+                new Claim(JwtRegisteredClaimNames.Nbf, EpochTime.GetIntDate(Default.NotBefore).ToString(), ClaimValueTypes.String, Issuer, Issuer),
+                new Claim(JwtRegisteredClaimNames.Exp, EpochTime.GetIntDate(Default.Expires).ToString(), ClaimValueTypes.String, Issuer, Issuer),
+            };
+        }
+        public static List<Claim> PayloadClaimsTemp
+        {
+            get => new List<Claim>()
+            {
+                new Claim(JwtRegisteredClaimNames.Email, "Bob@contoso.com", ClaimValueTypes.String, Issuer, Issuer),
+                new Claim(JwtRegisteredClaimNames.GivenName, "Bob", ClaimValueTypes.String, Issuer, Issuer),
+                new Claim(JwtRegisteredClaimNames.Iss, "hello", ClaimValueTypes.String, Issuer, Issuer),
+                new Claim(JwtRegisteredClaimNames.Iss, "heloagain", ClaimValueTypes.String, Issuer, Issuer),
                 new Claim(JwtRegisteredClaimNames.Aud, Default.Audience, ClaimValueTypes.String, Issuer, Issuer),
                 new Claim(JwtRegisteredClaimNames.Iat, EpochTime.GetIntDate(Default.IssueInstant).ToString(), ClaimValueTypes.String, Issuer, Issuer),
                 new Claim(JwtRegisteredClaimNames.Nbf, EpochTime.GetIntDate(Default.NotBefore).ToString(), ClaimValueTypes.String, Issuer, Issuer),
@@ -1112,7 +1127,7 @@ namespace Microsoft.IdentityModel.TestUtils
 
         public static string UnsignedJwt
         {
-            get => (new JwtSecurityTokenHandler()).CreateEncodedJwt(Issuer, Audience, ClaimsIdentity, null, null, null, null);
+            get => (new JwtSecurityTokenHandler()).CreateEncodedJwt(Issuer, Audience, ClaimsIdentity, null, null, null, null,null);
         }
 
         public static TokenValidationParameters JWECompressionTokenValidationParameters
diff --git a/test/Microsoft.IdentityModel.Tokens.Saml.Tests/SamlSecurityTokenHandlerTests.cs b/test/Microsoft.IdentityModel.Tokens.Saml.Tests/SamlSecurityTokenHandlerTests.cs
index 088690be..6eaec04a 100644
--- a/test/Microsoft.IdentityModel.Tokens.Saml.Tests/SamlSecurityTokenHandlerTests.cs
+++ b/test/Microsoft.IdentityModel.Tokens.Saml.Tests/SamlSecurityTokenHandlerTests.cs
@@ -351,245 +351,6 @@ namespace Microsoft.IdentityModel.Tokens.Saml.Tests
 
                 return new TheoryData<SamlTheoryData>
                 {
-                    new SamlTheoryData
-                    {
-                        ExpectedException = ExpectedException.ArgumentNullException("IDX10000:"),
-                        First = true,
-                        Handler = new SamlSecurityTokenHandler(),
-                        TestId = "Null-SecurityToken",
-                        Token = null,
-                        ValidationParameters = new TokenValidationParameters()
-                    },
-                    new SamlTheoryData
-                    {
-                        ExpectedException = ExpectedException.ArgumentNullException("IDX10000:"),
-                        Handler = new SamlSecurityTokenHandler(),
-                        TestId = "NULL-TokenValidationParameters",
-                        Token = "s",
-                        ValidationParameters = null,
-                    },
-                    new SamlTheoryData
-                    {
-                        ExpectedException = ExpectedException.ArgumentException("IDX10209:"),
-                        Handler = new SamlSecurityTokenHandler { MaximumTokenSizeInBytes = 1 },
-                        TestId = "SecurityTokenTooLarge",
-                        Token = "ss",
-                        ValidationParameters = new TokenValidationParameters(),
-                    },
-                    new SamlTheoryData
-                    {
-                        ExpectedException = new ExpectedException(typeof(SamlSecurityTokenReadException), "IDX11115:"),
-                        Handler = new SamlSecurityTokenHandler(),
-                        TestId = nameof(ReferenceTokens.SamlToken_MissingMajorVersion),
-                        Token = ReferenceTokens.SamlToken_MissingMajorVersion,
-                        ValidationParameters = new TokenValidationParameters(),
-                    },
-                    new SamlTheoryData
-                    {
-                        ExpectedException = new ExpectedException(typeof(SamlSecurityTokenReadException), "IDX11115:"),
-                        Handler = new SamlSecurityTokenHandler(),
-                        TestId = nameof(ReferenceTokens.SamlToken_MissingMinorVersion),
-                        Token = ReferenceTokens.SamlToken_MissingMinorVersion,
-                        ValidationParameters = new TokenValidationParameters(),
-                    },
-                    new SamlTheoryData
-                    {
-                        ExpectedException = new ExpectedException(typeof(SamlSecurityTokenReadException), "IDX11116:"),
-                        Handler = new SamlSecurityTokenHandler(),
-                        TestId = nameof(ReferenceTokens.SamlToken_MajorVersionNotV1),
-                        Token = ReferenceTokens.SamlToken_MajorVersionNotV1,
-                        ValidationParameters = new TokenValidationParameters(),
-                    },
-                    new SamlTheoryData
-                    {
-                        ExpectedException = new ExpectedException(typeof(SamlSecurityTokenReadException), "IDX11117:"),
-                        Handler = new SamlSecurityTokenHandler(),
-                        TestId = nameof(ReferenceTokens.SamlToken_MinorVersionNotV1),
-                        Token = ReferenceTokens.SamlToken_MinorVersionNotV1,
-                        ValidationParameters = new TokenValidationParameters(),
-                    },
-                    new SamlTheoryData
-                    {
-                        ExpectedException = new ExpectedException(typeof(SamlSecurityTokenReadException), "IDX11115:"),
-                        Handler = new SamlSecurityTokenHandler(),
-                        TestId = nameof(ReferenceTokens.SamlToken_IdMissing),
-                        Token = ReferenceTokens.SamlToken_IdMissing,
-                        ValidationParameters = new TokenValidationParameters(),
-                    },
-                    new SamlTheoryData
-                    {
-                        ExpectedException = new ExpectedException(typeof(SamlSecurityTokenReadException), "IDX11121:"),
-                        Handler = new SamlSecurityTokenHandler(),
-                        TestId = nameof(ReferenceTokens.SamlToken_IdFormatError),
-                        Token = ReferenceTokens.SamlToken_IdFormatError,
-                        ValidationParameters = new TokenValidationParameters(),
-                    },
-                    new SamlTheoryData
-                    {
-                        ExpectedException = new ExpectedException(typeof(SamlSecurityTokenReadException), "IDX11115:"),
-                        Handler = new SamlSecurityTokenHandler(),
-                        TestId = nameof(ReferenceTokens.SamlToken_IssuerMissing),
-                        Token = ReferenceTokens.SamlToken_IssuerMissing,
-                        ValidationParameters = new TokenValidationParameters(),
-                    },
-                    new SamlTheoryData
-                    {
-                        ExpectedException = new ExpectedException(typeof(SamlSecurityTokenReadException), "IDX11115:"),
-                        Handler = new SamlSecurityTokenHandler(),
-                        TestId = nameof(ReferenceTokens.SamlToken_IssueInstantMissing),
-                        Token = ReferenceTokens.SamlToken_IssueInstantMissing,
-                        ValidationParameters = new TokenValidationParameters(),
-                    },
-                    new SamlTheoryData
-                    {
-                        ExpectedException = new ExpectedException(typeof(SamlSecurityTokenReadException), "IDX11122:", typeof(FormatException)),
-                        Handler = new SamlSecurityTokenHandler(),
-                        TestId = nameof(ReferenceTokens.SamlToken_IssueInstantFormatError),
-                        Token = ReferenceTokens.SamlToken_IssueInstantFormatError,
-                        ValidationParameters = new TokenValidationParameters(),
-                    },
-                    new SamlTheoryData
-                    {
-                        ExpectedException = new ExpectedException(typeof(SamlSecurityTokenReadException), "IDX11120:"),
-                        Handler = new SamlSecurityTokenHandler(),
-                        TestId = nameof(ReferenceTokens.SamlToken_AudienceMissing),
-                        Token = ReferenceTokens.SamlToken_AudienceMissing,
-                        ValidationParameters = new TokenValidationParameters(),
-                    },
-                    new SamlTheoryData
-                    {
-                        ExpectedException = new ExpectedException(typeof(SamlSecurityTokenReadException), "IDX11130:"),
-                        Handler = new SamlSecurityTokenHandler(),
-                        TestId = nameof(ReferenceTokens.SamlToken_NoStatements),
-                        Token = ReferenceTokens.SamlToken_NoStatements,
-                        ValidationParameters = new TokenValidationParameters(),
-                    },
-                    new SamlTheoryData
-                    {
-                        ExpectedException = new ExpectedException(typeof(SamlSecurityTokenReadException), "IDX11112:", typeof(XmlReadException)),
-                        Handler = new SamlSecurityTokenHandler(),
-                        TestId = nameof(ReferenceTokens.SamlToken_NoSubject),
-                        Token = ReferenceTokens.SamlToken_NoSubject,
-                        ValidationParameters = new TokenValidationParameters(),
-                    },
-                    new SamlTheoryData
-                    {
-                        ExpectedException = new ExpectedException(typeof(SamlSecurityTokenReadException), "IDX11131:"),
-                        Handler = new SamlSecurityTokenHandler(),
-                        TestId = nameof(ReferenceTokens.SamlToken_NoAttributes),
-                        Token = ReferenceTokens.SamlToken_NoAttributes,
-                        ValidationParameters = new TokenValidationParameters(),
-                    },
-                    new SamlTheoryData
-                    {
-                        Handler = new SamlSecurityTokenHandler(),
-                        TestId = $"{nameof(ReferenceTokens.SamlToken_Valid)} IssuerSigningKey set",
-                        Token = ReferenceTokens.SamlToken_Valid,
-                        ValidationParameters = new TokenValidationParameters
-                        {
-                            IssuerSigningKey = KeyingMaterial.DefaultX509SigningCreds_2048_RsaSha2_Sha2.Key,
-                            ValidateIssuer = false,
-                            ValidateAudience = false,
-                            ValidateLifetime = false,
-                        }
-                    },
-                    new SamlTheoryData
-                    {
-                        Handler = new SamlSecurityTokenHandler(),
-                        TestId = $"{nameof(ReferenceTokens.SamlToken_Valid)} IssuerSigningKey Rsa",
-                        Token = ReferenceTokens.SamlToken_Valid_WithRsaKeyValue,
-                        ValidationParameters = new TokenValidationParameters
-                        {
-                            IssuerSigningKey = KeyingMaterial.DefaultRsaSecurityKey1,
-                            ValidateIssuer = false,
-                            ValidateAudience = false,
-                            ValidateLifetime = false,
-                        }
-                    },
-                    new SamlTheoryData
-                    {
-                        Handler = new SamlSecurityTokenHandler(),
-                        TestId = $"{nameof(ReferenceTokens.SamlToken_Valid)} IssuerSigningKey JsonWithCertificate",
-                        Token = ReferenceTokens.SamlToken_Valid,
-                        ValidationParameters = new TokenValidationParameters
-                        {
-                            IssuerSigningKey = KeyingMaterial.DefaultJsonWebKeyWithCertificate1,
-                            ValidateIssuer = false,
-                            ValidateAudience = false,
-                            ValidateLifetime = false,
-                        }
-                    },
-                    new SamlTheoryData
-                    {
-                        Handler = new SamlSecurityTokenHandler(),
-                        TestId = $"{nameof(ReferenceTokens.SamlToken_Valid)} IssuerSigningKey JsonWithParameters",
-                        Token = ReferenceTokens.SamlToken_Valid,
-                        ValidationParameters = new TokenValidationParameters
-                        {
-                            IssuerSigningKey = KeyingMaterial.DefaultJsonWebKeyWithParameters1,
-                            ValidateIssuer = false,
-                            ValidateAudience = false,
-                            ValidateLifetime = false,
-                        }
-                    },
-                    new SamlTheoryData
-                    {
-                        Handler = new SamlSecurityTokenHandler(),
-                        TestId = nameof(ReferenceTokens.SamlToken_Valid_Spaces_Added),
-                        Token = ReferenceTokens.SamlToken_Valid_Spaces_Added,
-                        ValidationParameters = new TokenValidationParameters
-                        {
-                            IssuerSigningKey = KeyingMaterial.DefaultX509SigningCreds_2048_RsaSha2_Sha2.Key,
-                            ValidateIssuer = false,
-                            ValidateAudience = false,
-                            ValidateLifetime = false,
-                        }
-                    },
-                    new SamlTheoryData
-                    {
-                        ExpectedException = ExpectedException.SecurityTokenInvalidSignatureException("IDX10503:"),
-                        Handler = new SamlSecurityTokenHandler(),
-                        TestId = nameof(ReferenceTokens.SamlToken_AttributeTampered),
-                        Token = ReferenceTokens.SamlToken_AttributeTampered,
-                        ValidationParameters = new TokenValidationParameters
-                        {
-                            IssuerSigningKey = KeyingMaterial.DefaultX509SigningCreds_2048_RsaSha2_Sha2.Key,
-                        }
-                    },
-                    new SamlTheoryData
-                    {
-                        ExpectedException = ExpectedException.SecurityTokenInvalidSignatureException("IDX10503:"),
-                        Handler = new SamlSecurityTokenHandler(),
-                        TestId = nameof(ReferenceTokens.SamlToken_DigestTampered),
-                        Token = ReferenceTokens.SamlToken_DigestTampered,
-                        ValidationParameters = new TokenValidationParameters
-                        {
-                            IssuerSigningKey = KeyingMaterial.DefaultX509SigningCreds_2048_RsaSha2_Sha2.Key,
-                        }
-                    },
-                    // Removed until we have a way of matching a KeyInfo with a SecurityKey.
-                    new SamlTheoryData
-                    {
-                        ExpectedException = ExpectedException.SecurityTokenSignatureKeyNotFoundException("IDX10501:"),
-                        Handler = new SamlSecurityTokenHandler(),
-                        TestId = nameof(ReferenceTokens.SamlToken_Valid),
-                        Token = ReferenceTokens.SamlToken_Valid,
-                        ValidationParameters = new TokenValidationParameters
-                        {
-                            IssuerSigningKey = KeyingMaterial.DefaultAADSigningKey,
-                        }
-                    },
-                    new SamlTheoryData
-                    {
-                        ExpectedException = ExpectedException.SecurityTokenInvalidSignatureException("IDX10503:"),
-                        Handler = new SamlSecurityTokenHandler(),
-                        TestId = nameof(ReferenceTokens.SamlToken_SignatureTampered),
-                        Token = ReferenceTokens.SamlToken_SignatureTampered,
-                        ValidationParameters = new TokenValidationParameters
-                        {
-                            IssuerSigningKey = KeyingMaterial.DefaultX509SigningCreds_2048_RsaSha2_Sha2.Key,
-                        }
-                    },
                     new SamlTheoryData
                     {
                         Handler = new SamlSecurityTokenHandler(),
@@ -603,156 +364,6 @@ namespace Microsoft.IdentityModel.Tokens.Saml.Tests
                             IssuerSigningKeyResolver = (token, securityToken, keyIdentifier, tvp) => { return new List<SecurityKey> { KeyingMaterial.DefaultJsonWebKeyWithCertificate1 }; },
                         }
                     },
-                    new SamlTheoryData
-                    {
-                        Handler = new SamlSecurityTokenHandler(),
-                        TestId = $"{nameof(ReferenceTokens.SamlToken_Valid)}RequireSignedTokens",
-                        Token = ReferenceTokens.SamlToken_Valid,
-                        ValidationParameters = new TokenValidationParameters
-                        {
-                            ValidateIssuerSigningKey = true,
-                            RequireSignedTokens = true,
-                            IssuerSigningKey = KeyingMaterial.DefaultX509SigningCreds_2048_RsaSha2_Sha2.Key,
-                            ValidateIssuer = false,
-                            ValidateAudience = false,
-                            ValidateLifetime = false,
-                        }
-                    },
-                    new SamlTheoryData
-                    {
-                        ExpectedException = ExpectedException.SecurityTokenInvalidSignatureException("IDX10500:"),
-                        Handler = new SamlSecurityTokenHandler(),
-                        TestId = $"{nameof(ReferenceTokens.SamlToken_Valid)}RequireSignedTokensNullSigningKey",
-                        Token = ReferenceTokens.SamlToken_Valid,
-                        ValidationParameters = new TokenValidationParameters
-                        {
-                            ValidateIssuerSigningKey = true,
-                            RequireSignedTokens = true,
-                            IssuerSigningKey = null,
-                            ValidateIssuer = false,
-                            ValidateAudience = false,
-                            ValidateLifetime = false,
-                        }
-                    },
-                    new SamlTheoryData
-                    {
-                        Handler = new SamlSecurityTokenHandler(),
-                        TestId = $"{nameof(ReferenceTokens.SamlToken_Valid)}DontRequireSignedTokens",
-                        Token = ReferenceTokens.SamlToken_Valid,
-                        ValidationParameters = new TokenValidationParameters
-                        {
-                            ValidateIssuerSigningKey = true,
-                            RequireSignedTokens = false,
-                            IssuerSigningKey = KeyingMaterial.DefaultX509SigningCreds_2048_RsaSha2_Sha2.Key,
-                            ValidateIssuer = false,
-                            ValidateAudience = false,
-                            ValidateLifetime = false,
-                        }
-                    },
-                    new SamlTheoryData
-                    {
-                        Handler = new SamlSecurityTokenHandler(),
-                        TestId = $"{nameof(ReferenceTokens.SamlToken_SignatureMissing)}DontRequireSignedTokensNullSigningKey",
-                        Token = ReferenceTokens.SamlToken_SignatureMissing,
-                        ValidationParameters = new TokenValidationParameters
-                        {
-                            ValidateIssuerSigningKey = true,
-                            RequireSignedTokens = false,
-                            IssuerSigningKey = null,
-                            ValidateIssuer = false,
-                            ValidateAudience = false,
-                            ValidateLifetime = false,
-                        }
-                    },
-                    new SamlTheoryData
-                    {
-                        Audiences = new List<string>(),
-                        Token = ReferenceTokens.SamlToken_NoAudienceRestrictions_NoSignature,
-                        ExpectedException = new ExpectedException(typeof(SamlSecurityTokenException), "IDX11401:"),
-                        TestId = $"{nameof(ReferenceTokens.SamlToken_NoAudienceRestrictions_NoSignature)}RequireAudienceTrue",
-                        ValidationParameters = new TokenValidationParameters
-                        {
-                            IssuerSigningKey = KeyingMaterial.DefaultAADSigningKey,
-                            ValidAudience = "spn:fe78e0b4-6fe7-47e6-812c-fb75cee266a4",
-                            ValidateLifetime = false,
-                            ValidateIssuer = false,
-                            RequireSignedTokens = false
-                        }
-                    },
-                    new SamlTheoryData
-                    {
-                        Audiences = new List<string>(),
-                        Token = ReferenceTokens.SamlToken_NoAudienceRestrictions_NoSignature,
-                        TestId = $"{nameof(ReferenceTokens.SamlToken_NoAudienceRestrictions_NoSignature)}RequireAudienceFalse",
-                        ValidationParameters = new TokenValidationParameters
-                        {
-                            IssuerSigningKey = KeyingMaterial.DefaultAADSigningKey,
-                            RequireAudience = false,
-                            ValidAudience = "spn:fe78e0b4-6fe7-47e6-812c-fb75cee266a4",
-                            ValidateLifetime = false,
-                            ValidateIssuer = false,
-                            RequireSignedTokens = false
-                        },
-                    },
-                    new SamlTheoryData
-                    {
-                        Audiences = new List<string>(),
-                        Token = ReferenceTokens.SamlToken_NoAudienceRestrictions_NoSignature,
-                        ExpectedException = new ExpectedException(typeof(SecurityTokenExpiredException), "IDX10223:"),
-                        TestId = $"{nameof(ReferenceTokens.SamlToken_NoAudienceRestrictions_NoSignature)}RequireAudienceFalseValidateLifetimeTrue",
-                        ValidationParameters = new TokenValidationParameters
-                        {
-                            IssuerSigningKey = KeyingMaterial.DefaultAADSigningKey,
-                            RequireAudience = false,
-                            ValidAudience = "spn:fe78e0b4-6fe7-47e6-812c-fb75cee266a4",
-                            ValidateLifetime = true,
-                            ValidateIssuer = false,
-                            RequireSignedTokens = false
-                        },
-                    },
-                    new SamlTheoryData
-                    {
-                        Audiences = new List<string>(),
-                        Token = ReferenceTokens.SamlToken_NoConditions_NoSignature,
-                        ExpectedException = new ExpectedException(typeof(SamlSecurityTokenException), "IDX11401:"),
-                        TestId = $"{nameof(ReferenceTokens.SamlToken_NoConditions_NoSignature)}RequireAudienceTrue",
-                        ValidationParameters = new TokenValidationParameters
-                        {
-                            IssuerSigningKey = KeyingMaterial.DefaultAADSigningKey,
-                            ValidAudience = "spn:fe78e0b4-6fe7-47e6-812c-fb75cee266a4",
-                            ValidateLifetime = false,
-                            ValidateIssuer = false,
-                            RequireSignedTokens = false
-                        }
-                    },
-                    new SamlTheoryData
-                    {
-
-                        Audiences = new List<string>(),
-                        Token = ReferenceTokens.SamlToken_NoConditions_NoSignature,
-                        TestId = $"{nameof(ReferenceTokens.SamlToken_NoConditions_NoSignature)}RequireAudienceFalse",
-                        ValidationParameters = new TokenValidationParameters
-                        {
-                            IssuerSigningKey = KeyingMaterial.DefaultAADSigningKey,
-                            RequireAudience = false,
-                            ValidAudience = "spn:fe78e0b4-6fe7-47e6-812c-fb75cee266a4",
-                            ValidateLifetime = false,
-                            ValidateIssuer = false,
-                            RequireSignedTokens = false
-                        },
-                    },
-                    new SamlTheoryData
-                    {
-                        ExpectedException = ExpectedException.SecurityTokenInvalidSignatureException("IDX10500:"),
-                        Handler = new SamlSecurityTokenHandler(),
-                        TestId = $"{nameof(ReferenceTokens.SamlToken_Valid)}NotTryAllIssuerSigningKeys",
-                        Token = ReferenceTokens.SamlToken_Valid,
-                        ValidationParameters = new TokenValidationParameters
-                        {
-                            IssuerSigningKey = KeyingMaterial.DefaultAADSigningKey,
-                            TryAllIssuerSigningKeys = false
-                        }
-                    },
                 };
             }
         }
diff --git a/test/System.IdentityModel.Tokens.Jwt.Tests/CreateAndValidateTokens.cs b/test/System.IdentityModel.Tokens.Jwt.Tests/CreateAndValidateTokens.cs
index c33d966b..d1bb4516 100644
--- a/test/System.IdentityModel.Tokens.Jwt.Tests/CreateAndValidateTokens.cs
+++ b/test/System.IdentityModel.Tokens.Jwt.Tests/CreateAndValidateTokens.cs
@@ -216,7 +216,7 @@ namespace System.IdentityModel.Tokens.Jwt.Tests
                 theoryData.TokenDescriptor.NotBefore,
                 theoryData.TokenDescriptor.Expires,
                 theoryData.TokenDescriptor.IssuedAt,
-                theoryData.TokenDescriptor.SigningCredentials);
+                theoryData.TokenDescriptor.SigningCredentials,null);
             var jwtToken5 = handler.CreateToken(theoryData.TokenDescriptor) as JwtSecurityToken;
             var jwtToken6 = handler.CreateJwtSecurityToken(
                 theoryData.TokenDescriptor.Issuer,
diff --git a/test/System.IdentityModel.Tokens.Jwt.Tests/JwtSecurityTokenHandlerTests.cs b/test/System.IdentityModel.Tokens.Jwt.Tests/JwtSecurityTokenHandlerTests.cs
index e044b1ad..1d83dd5f 100644
--- a/test/System.IdentityModel.Tokens.Jwt.Tests/JwtSecurityTokenHandlerTests.cs
+++ b/test/System.IdentityModel.Tokens.Jwt.Tests/JwtSecurityTokenHandlerTests.cs
@@ -58,6 +58,93 @@ namespace System.IdentityModel.Tokens.Jwt.Tests
             TestUtilities.AssertFailIfErrors(context);
         }
 
+        // Tests checks to make sure that the token string (JWE) created by calling 
+        // CreateToken(string payload, SigningCredentials signingCredentials, EncryptingCredentials encryptingCredentials)
+        // is equivalent to the token string created by calling CreateToken(SecurityTokenDescriptor tokenDescriptor).
+        [Theory, MemberData(nameof(CreateJWEUsingSecurityTokenDescriptorTheoryData))]
+        public void CreateJWEUsingSecurityTokenDescriptor(CreateTokenTheoryData theoryData)
+        {
+            var context = TestUtilities.WriteHeader($"{this}.CreateJWEUsingSecurityTokenDescriptor", theoryData);
+            try
+            {
+                 JwtSecurityToken token = theoryData.JwtSecurityTokenHandler.CreateJwtSecurityToken(theoryData.TokenDescriptor);
+                string jweFromString;
+                if (theoryData.TokenDescriptor.SigningCredentials == null)
+                    jweFromString = theoryData.JsonWebTokenHandler.CreateToken(theoryData.Payload, theoryData.TokenDescriptor.EncryptingCredentials);
+                else if (theoryData.TokenDescriptor.AdditionalHeaderClaims != null)
+                    jweFromString = theoryData.JsonWebTokenHandler.CreateToken(theoryData.Payload, theoryData.TokenDescriptor.SigningCredentials, theoryData.TokenDescriptor.EncryptingCredentials, theoryData.TokenDescriptor.AdditionalHeaderClaims);
+                else
+                    jweFromString = theoryData.JsonWebTokenHandler.CreateToken(theoryData.Payload, theoryData.TokenDescriptor.SigningCredentials, theoryData.TokenDescriptor.EncryptingCredentials);
+
+                //var validationResultFromSecurityTokenDescriptor = theoryData.JsonWebTokenHandler.ValidateToken(jweFromSecurityTokenDescriptor, theoryData.ValidationParameters);
+                var validationResultFromString = theoryData.JsonWebTokenHandler.ValidateToken(jweFromString, theoryData.ValidationParameters);
+
+               // IdentityComparer.AreEqual(validationResultFromSecurityTokenDescriptor.IsValid, theoryData.IsValid, context);
+                IdentityComparer.AreEqual(validationResultFromString.IsValid, theoryData.IsValid, context);
+
+               // var jweTokenFromSecurityTokenDescriptor = validationResultFromSecurityTokenDescriptor.SecurityToken as JsonWebToken;
+                var jweTokenFromString = validationResultFromString.SecurityToken as JsonWebToken;
+
+                // If the signing key used was an x509SecurityKey, make sure that the 'X5t' property was set properly and
+                // that the values of 'X5t' and 'Kid' on the JsonWebToken are equal to each other.
+                if (theoryData.TokenDescriptor.SigningCredentials?.Key is X509SecurityKey x509SecurityKey)
+                {
+                    //var innerTokenFromSecurityTokenDescriptor = jweTokenFromSecurityTokenDescriptor.InnerToken as JsonWebToken;
+                    var innerTokenFromString = jweTokenFromString.InnerToken as JsonWebToken;
+
+                   // IdentityComparer.AreEqual(innerTokenFromSecurityTokenDescriptor.X5t, x509SecurityKey.X5t, context);
+                    //IdentityComparer.AreEqual(innerTokenFromSecurityTokenDescriptor.Kid, x509SecurityKey.KeyId, context);
+                    IdentityComparer.AreEqual(innerTokenFromString.X5t, x509SecurityKey.X5t, context);
+                    IdentityComparer.AreEqual(innerTokenFromString.Kid, x509SecurityKey.KeyId, context);
+                }
+
+                context.PropertiesToIgnoreWhenComparing = new Dictionary<Type, List<string>>
+                {
+                    { typeof(JsonWebToken), new List<string> { "EncodedToken", "AuthenticationTag", "Ciphertext", "InitializationVector" } },
+                };
+
+                //IdentityComparer.AreEqual(jweTokenFromSecurityTokenDescriptor, jweTokenFromString, context);
+                theoryData.ExpectedException.ProcessNoException(context);
+            }
+            catch (Exception ex)
+            {
+                theoryData.ExpectedException.ProcessException(ex, context);
+            }
+
+            TestUtilities.AssertFailIfErrors(context);
+        }
+
+        public static TheoryData<CreateTokenTheoryData> CreateJWEUsingSecurityTokenDescriptorTheoryData
+        {
+            get
+            {
+                return new TheoryData<CreateTokenTheoryData>
+                {
+                    new CreateTokenTheoryData
+                    {
+                        First = true,
+                        TestId = "Valid",
+                        Payload = Default.PayloadString,
+                        TokenDescriptor =  new SecurityTokenDescriptor
+                        {
+                            SigningCredentials = KeyingMaterial.JsonWebKeyRsa256SigningCredentials,
+                            EncryptingCredentials = KeyingMaterial.DefaultSymmetricEncryptingCreds_Aes256_Sha512_512,
+                            Claims = Default.PayloadDictionary,
+                            Subject = new ClaimsIdentity(Default.PayloadClaims)
+                        },
+                        JwtSecurityTokenHandler = new JwtSecurityTokenHandler(),
+                        ValidationParameters = new TokenValidationParameters
+                        {
+                            IssuerSigningKey = KeyingMaterial.JsonWebKeyRsa256SigningCredentials.Key,
+                            TokenDecryptionKey = KeyingMaterial.DefaultSymmetricSecurityKey_512,
+                            ValidAudience = Default.Audience,
+                            ValidIssuer = Default.Issuer
+                        }
+                    },
+                };
+            }
+        }
+
         public static TheoryData<JwtTheoryData> ActorTheoryData
         {
             get
@@ -76,7 +163,7 @@ namespace System.IdentityModel.Tokens.Jwt.Tests
                     {
                         TestId = "ActorValidationUsingTVP - True",
                         ExpectedException = ExpectedException.NoExceptionExpected,
-                        Token = handler.CreateEncodedJwt(Default.Issuer, Default.Audience, claimsIdentity, null, null, null, Default.AsymmetricSigningCredentials),
+                        Token = handler.CreateEncodedJwt(Default.Issuer, Default.Audience, claimsIdentity, null, null, null, Default.AsymmetricSigningCredentials,null),
                         TokenHandler = handler,
                         ValidationParameters = validationParameters
                     }
@@ -93,7 +180,7 @@ namespace System.IdentityModel.Tokens.Jwt.Tests
                     { 
                         TestId = "ActorValidationUsingTVP - True",
                         ExpectedException = ExpectedException.NoExceptionExpected,
-                        Token = handler.CreateEncodedJwt(Default.Issuer, Default.Audience, claimsIdentity, null, null, null, Default.AsymmetricSigningCredentials),
+                        Token = handler.CreateEncodedJwt(Default.Issuer, Default.Audience, claimsIdentity, null, null, null, Default.AsymmetricSigningCredentials,null),
                         TokenHandler = handler,
                         ValidationParameters = validationParameters
                     }
@@ -112,7 +199,7 @@ namespace System.IdentityModel.Tokens.Jwt.Tests
                     {
                         TestId = "ActorValidationUsingActorTVP - ExceptionExpected",
                         ExpectedException = ExpectedException.SecurityTokenSignatureKeyNotFoundException("IDX10501"),
-                        Token = handler.CreateEncodedJwt(Default.Issuer, Default.Audience, claimsIdentity, null, null, null, Default.AsymmetricSigningCredentials),
+                        Token = handler.CreateEncodedJwt(Default.Issuer, Default.Audience, claimsIdentity, null, null, null, Default.AsymmetricSigningCredentials,null),
                         TokenHandler = handler,
                         ValidationParameters = validationParameters
                     }
@@ -131,7 +218,7 @@ namespace System.IdentityModel.Tokens.Jwt.Tests
                     {
                         TestId = "ActorValidationUsingTVP - ExceptionExpected",
                         ExpectedException = ExpectedException.SecurityTokenSignatureKeyNotFoundException("IDX10501"),
-                        Token = handler.CreateEncodedJwt(Default.Issuer, Default.Audience, claimsIdentity, null, null, null, Default.AsymmetricSigningCredentials),
+                        Token = handler.CreateEncodedJwt(Default.Issuer, Default.Audience, claimsIdentity, null, null, null, Default.AsymmetricSigningCredentials, null),
                         TokenHandler = handler,
                         ValidationParameters = validationParameters
                     }
@@ -152,7 +239,7 @@ namespace System.IdentityModel.Tokens.Jwt.Tests
                     {
                         TestId = "ActorValidationUsingTVP - NotTryingAllIssuerSigningKeys - ExceptionExpected",
                         ExpectedException = ExpectedException.SecurityTokenSignatureKeyNotFoundException("IDX10501"),
-                        Token = handler.CreateEncodedJwt(Default.Issuer, Default.Audience, claimsIdentity, null, null, null, Default.AsymmetricSigningCredentials),
+                        Token = handler.CreateEncodedJwt(Default.Issuer, Default.Audience, claimsIdentity, null, null, null, Default.AsymmetricSigningCredentials, null),
                         TokenHandler = handler,
                         ValidationParameters = validationParameters
                     }
@@ -171,7 +258,7 @@ namespace System.IdentityModel.Tokens.Jwt.Tests
                     {                     
                         TestId = "ActorValidationFalse",
                         ExpectedException = ExpectedException.NoExceptionExpected,
-                        Token = handler.CreateEncodedJwt(Default.Issuer, Default.Audience, claimsIdentity, null, null, null, Default.AsymmetricSigningCredentials),
+                        Token = handler.CreateEncodedJwt(Default.Issuer, Default.Audience, claimsIdentity, null, null, null, Default.AsymmetricSigningCredentials, null),
                         TokenHandler = handler,
                         ValidationParameters = validationParameters
                     }
@@ -189,7 +276,7 @@ namespace System.IdentityModel.Tokens.Jwt.Tests
                     {
                         TestId = "ActorValidationUsingActorTVP - True",
                         ExpectedException = ExpectedException.NoExceptionExpected,
-                        Token = handler.CreateEncodedJwt(Default.Issuer, Default.Audience, claimsIdentity, null, null, null, Default.AsymmetricSigningCredentials),
+                        Token = handler.CreateEncodedJwt(Default.Issuer, Default.Audience, claimsIdentity, null, null, null, Default.AsymmetricSigningCredentials, null),
                         TokenHandler = handler,
                         ValidationParameters = validationParameters
                     }
@@ -1062,7 +1149,7 @@ namespace System.IdentityModel.Tokens.Jwt.Tests
             get
             {
                 var handler = new JwtSecurityTokenHandler();
-                var jwt = handler.CreateEncodedJwt(Default.Issuer, Default.Audience, Default.ClaimsIdentity, null, null, null, null);
+                var jwt = handler.CreateEncodedJwt(Default.Issuer, Default.Audience, Default.ClaimsIdentity, null, null, null, null, null) ;
                 var properties = new Dictionary<string, object>
                 {
                     {"InvalidIssuer", Default.Issuer }
@@ -1985,6 +2072,32 @@ namespace System.IdentityModel.Tokens.Jwt.Tests
         JWS
     }
 
+    public class CreateTokenTheoryData : TheoryDataBase
+    {
+        public Dictionary<string, object> AdditionalHeaderClaims { get; set; }
+
+        public string Payload { get; set; }
+
+        public string CompressionAlgorithm { get; set; }
+
+        public CompressionProviderFactory CompressionProviderFactory { get; set; }
+
+        public EncryptingCredentials EncryptingCredentials { get; set; }
+
+        public bool IsValid { get; set; } = true;
+
+        public SigningCredentials SigningCredentials { get; set; }
+
+        public SecurityTokenDescriptor TokenDescriptor { get; set; }
+
+        public JsonWebTokenHandler JsonWebTokenHandler { get; set; }
+
+        public JwtSecurityTokenHandler JwtSecurityTokenHandler { get; set; }
+
+        public string JwtToken { get; set; }
+
+        public TokenValidationParameters ValidationParameters { get; set; }
+    }
     public class JwtSecurityTokenHandlerCustom : JwtSecurityTokenHandler
     {
         public void CreateClaimsIdentityCustom(JwtSecurityToken jwtToken, string issuer, TokenValidationParameters validationParameters)
